// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: struct.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommonRewardItem struct {
	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Num    int64  `protobuf:"varint,2,opt,name=num,proto3" json:"num"`
	Param  int64  `protobuf:"varint,3,opt,name=param,proto3" json:"param"`
	MaxNum int64  `protobuf:"varint,4,opt,name=maxNum,proto3" json:"maxNum"`
	Image  string `protobuf:"bytes,5,opt,name=image,proto3" json:"image"`
	//int32  rare      = 6; // 是否为稀有奖励 1:稀有 配置中心中配置， 先占用个位置
	//int32  broadcast = 7; // 是否需要广播 1:需要
	InnerReward          []*CommonRewardItem `protobuf:"bytes,8,rep,name=innerReward,proto3" json:"innerReward"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CommonRewardItem) Reset()         { *m = CommonRewardItem{} }
func (m *CommonRewardItem) String() string { return proto.CompactTextString(m) }
func (*CommonRewardItem) ProtoMessage()    {}
func (*CommonRewardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{0}
}
func (m *CommonRewardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonRewardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonRewardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonRewardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRewardItem.Merge(m, src)
}
func (m *CommonRewardItem) XXX_Size() int {
	return m.Size()
}
func (m *CommonRewardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRewardItem.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRewardItem proto.InternalMessageInfo

func (m *CommonRewardItem) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CommonRewardItem) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CommonRewardItem) GetParam() int64 {
	if m != nil {
		return m.Param
	}
	return 0
}

func (m *CommonRewardItem) GetMaxNum() int64 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

func (m *CommonRewardItem) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CommonRewardItem) GetInnerReward() []*CommonRewardItem {
	if m != nil {
		return m.InnerReward
	}
	return nil
}

type SdkUserInfo struct {
	Name                 string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name"`
	Sex                  GenderType `protobuf:"varint,2,opt,name=Sex,proto3,enum=proto.GenderType" json:"Sex"`
	Avatar               string     `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar"`
	Country              string     `protobuf:"bytes,4,opt,name=Country,proto3" json:"Country"`
	SiteUid              string     `protobuf:"bytes,5,opt,name=SiteUid,proto3" json:"SiteUid"`
	FirstName            string     `protobuf:"bytes,6,opt,name=FirstName,proto3" json:"FirstName"`
	Email                string     `protobuf:"bytes,7,opt,name=Email,proto3" json:"Email"`
	OpenID               string     `protobuf:"bytes,8,opt,name=OpenID,proto3" json:"OpenID"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SdkUserInfo) Reset()         { *m = SdkUserInfo{} }
func (m *SdkUserInfo) String() string { return proto.CompactTextString(m) }
func (*SdkUserInfo) ProtoMessage()    {}
func (*SdkUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{1}
}
func (m *SdkUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SdkUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SdkUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SdkUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SdkUserInfo.Merge(m, src)
}
func (m *SdkUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *SdkUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SdkUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SdkUserInfo proto.InternalMessageInfo

func (m *SdkUserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SdkUserInfo) GetSex() GenderType {
	if m != nil {
		return m.Sex
	}
	return GenderTypeInit
}

func (m *SdkUserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *SdkUserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *SdkUserInfo) GetSiteUid() string {
	if m != nil {
		return m.SiteUid
	}
	return ""
}

func (m *SdkUserInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *SdkUserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SdkUserInfo) GetOpenID() string {
	if m != nil {
		return m.OpenID
	}
	return ""
}

// 客户端更新
type AppUpdateInfo struct {
	PromptVersion        string   `protobuf:"bytes,1,opt,name=PromptVersion,proto3" json:"PromptVersion"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content"`
	ForceMinVersion      string   `protobuf:"bytes,3,opt,name=ForceMinVersion,proto3" json:"ForceMinVersion"`
	ForceVersion         string   `protobuf:"bytes,4,opt,name=ForceVersion,proto3" json:"ForceVersion"`
	DownloadUrl          string   `protobuf:"bytes,5,opt,name=DownloadUrl,proto3" json:"DownloadUrl"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppUpdateInfo) Reset()         { *m = AppUpdateInfo{} }
func (m *AppUpdateInfo) String() string { return proto.CompactTextString(m) }
func (*AppUpdateInfo) ProtoMessage()    {}
func (*AppUpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{2}
}
func (m *AppUpdateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppUpdateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppUpdateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppUpdateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUpdateInfo.Merge(m, src)
}
func (m *AppUpdateInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppUpdateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUpdateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppUpdateInfo proto.InternalMessageInfo

func (m *AppUpdateInfo) GetPromptVersion() string {
	if m != nil {
		return m.PromptVersion
	}
	return ""
}

func (m *AppUpdateInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *AppUpdateInfo) GetForceMinVersion() string {
	if m != nil {
		return m.ForceMinVersion
	}
	return ""
}

func (m *AppUpdateInfo) GetForceVersion() string {
	if m != nil {
		return m.ForceVersion
	}
	return ""
}

func (m *AppUpdateInfo) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

// 服务器停服状况
type ServerInfo struct {
	IsPause              bool     `protobuf:"varint,1,opt,name=IsPause,proto3" json:"IsPause"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{3}
}
func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(m, src)
}
func (m *ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetIsPause() bool {
	if m != nil {
		return m.IsPause
	}
	return false
}

func (m *ServerInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ResourceInfo struct {
	CdnHost              string   `protobuf:"bytes,1,opt,name=CdnHost,proto3" json:"CdnHost"`
	ResourcePath         string   `protobuf:"bytes,2,opt,name=ResourcePath,proto3" json:"ResourcePath"`
	ConfigMD5            string   `protobuf:"bytes,3,opt,name=ConfigMD5,proto3" json:"ConfigMD5"`
	ConfigPath           string   `protobuf:"bytes,4,opt,name=ConfigPath,proto3" json:"ConfigPath"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceInfo) Reset()         { *m = ResourceInfo{} }
func (m *ResourceInfo) String() string { return proto.CompactTextString(m) }
func (*ResourceInfo) ProtoMessage()    {}
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{4}
}
func (m *ResourceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceInfo.Merge(m, src)
}
func (m *ResourceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceInfo proto.InternalMessageInfo

func (m *ResourceInfo) GetCdnHost() string {
	if m != nil {
		return m.CdnHost
	}
	return ""
}

func (m *ResourceInfo) GetResourcePath() string {
	if m != nil {
		return m.ResourcePath
	}
	return ""
}

func (m *ResourceInfo) GetConfigMD5() string {
	if m != nil {
		return m.ConfigMD5
	}
	return ""
}

func (m *ResourceInfo) GetConfigPath() string {
	if m != nil {
		return m.ConfigPath
	}
	return ""
}

type Reward struct {
	PropID               PropertyType `protobuf:"varint,1,opt,name=PropID,proto3,enum=proto.PropertyType" json:"PropID"`
	Incr                 int64        `protobuf:"varint,2,opt,name=Incr,proto3" json:"Incr"`
	Total                int64        `protobuf:"varint,3,opt,name=Total,proto3" json:"Total"`
	Expire               int64        `protobuf:"varint,4,opt,name=Expire,proto3" json:"Expire"`
	ID                   int32        `protobuf:"varint,5,opt,name=ID,proto3" json:"ID"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Reward) Reset()         { *m = Reward{} }
func (m *Reward) String() string { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()    {}
func (*Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{5}
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func (m *Reward) GetPropID() PropertyType {
	if m != nil {
		return m.PropID
	}
	return PropertyTypeInit
}

func (m *Reward) GetIncr() int64 {
	if m != nil {
		return m.Incr
	}
	return 0
}

func (m *Reward) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Reward) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Reward) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type Consume struct {
	PropID               PropertyType `protobuf:"varint,1,opt,name=PropID,proto3,enum=proto.PropertyType" json:"PropID"`
	Desc                 int64        `protobuf:"varint,2,opt,name=Desc,proto3" json:"Desc"`
	Expire               int64        `protobuf:"varint,4,opt,name=Expire,proto3" json:"Expire"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Consume) Reset()         { *m = Consume{} }
func (m *Consume) String() string { return proto.CompactTextString(m) }
func (*Consume) ProtoMessage()    {}
func (*Consume) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{6}
}
func (m *Consume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Consume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Consume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Consume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consume.Merge(m, src)
}
func (m *Consume) XXX_Size() int {
	return m.Size()
}
func (m *Consume) XXX_DiscardUnknown() {
	xxx_messageInfo_Consume.DiscardUnknown(m)
}

var xxx_messageInfo_Consume proto.InternalMessageInfo

func (m *Consume) GetPropID() PropertyType {
	if m != nil {
		return m.PropID
	}
	return PropertyTypeInit
}

func (m *Consume) GetDesc() int64 {
	if m != nil {
		return m.Desc
	}
	return 0
}

func (m *Consume) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

type UserProfile struct {
	Name                 string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name"`
	Nick                 string     `protobuf:"bytes,2,opt,name=Nick,proto3" json:"Nick"`
	Sex                  GenderType `protobuf:"varint,3,opt,name=Sex,proto3,enum=proto.GenderType" json:"Sex"`
	Avatar               string     `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar"`
	AvatarFrame          int64      `protobuf:"varint,5,opt,name=AvatarFrame,proto3" json:"AvatarFrame"`
	IsRobot              bool       `protobuf:"varint,6,opt,name=IsRobot,proto3" json:"IsRobot"`
	VIPTime              int64      `protobuf:"varint,7,opt,name=VIPTime,proto3" json:"VIPTime"`
	FamilyID             int64      `protobuf:"varint,8,opt,name=FamilyID,proto3" json:"FamilyID"`
	FamilyName           string     `protobuf:"bytes,9,opt,name=FamilyName,proto3" json:"FamilyName"`
	FamilyIcon           int64      `protobuf:"varint,10,opt,name=FamilyIcon,proto3" json:"FamilyIcon"`
	CurFlag              int64      `protobuf:"varint,11,opt,name=CurFlag,proto3" json:"CurFlag"`
	FlagList             []int64    `protobuf:"varint,12,rep,packed,name=FlagList,proto3" json:"FlagList"`
	Version              string     `protobuf:"bytes,13,opt,name=Version,proto3" json:"Version"`
	DeviceType           string     `protobuf:"bytes,14,opt,name=DeviceType,proto3" json:"DeviceType"`
	Channel              string     `protobuf:"bytes,15,opt,name=Channel,proto3" json:"Channel"`
	Platform             string     `protobuf:"bytes,16,opt,name=Platform,proto3" json:"Platform"`
	Language             string     `protobuf:"bytes,17,opt,name=Language,proto3" json:"Language"`
	Country              string     `protobuf:"bytes,18,opt,name=Country,proto3" json:"Country"`
	HotVersion           string     `protobuf:"bytes,19,opt,name=HotVersion,proto3" json:"HotVersion"`
	Prosperity           int64      `protobuf:"varint,20,opt,name=Prosperity,proto3" json:"Prosperity"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UserProfile) Reset()         { *m = UserProfile{} }
func (m *UserProfile) String() string { return proto.CompactTextString(m) }
func (*UserProfile) ProtoMessage()    {}
func (*UserProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{7}
}
func (m *UserProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProfile.Merge(m, src)
}
func (m *UserProfile) XXX_Size() int {
	return m.Size()
}
func (m *UserProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProfile.DiscardUnknown(m)
}

var xxx_messageInfo_UserProfile proto.InternalMessageInfo

func (m *UserProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserProfile) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *UserProfile) GetSex() GenderType {
	if m != nil {
		return m.Sex
	}
	return GenderTypeInit
}

func (m *UserProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserProfile) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *UserProfile) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *UserProfile) GetVIPTime() int64 {
	if m != nil {
		return m.VIPTime
	}
	return 0
}

func (m *UserProfile) GetFamilyID() int64 {
	if m != nil {
		return m.FamilyID
	}
	return 0
}

func (m *UserProfile) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

func (m *UserProfile) GetFamilyIcon() int64 {
	if m != nil {
		return m.FamilyIcon
	}
	return 0
}

func (m *UserProfile) GetCurFlag() int64 {
	if m != nil {
		return m.CurFlag
	}
	return 0
}

func (m *UserProfile) GetFlagList() []int64 {
	if m != nil {
		return m.FlagList
	}
	return nil
}

func (m *UserProfile) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UserProfile) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *UserProfile) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *UserProfile) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *UserProfile) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *UserProfile) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserProfile) GetHotVersion() string {
	if m != nil {
		return m.HotVersion
	}
	return ""
}

func (m *UserProfile) GetProsperity() int64 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

type PiggyWheelCardLevelConfig struct {
	PetID                int32    `protobuf:"varint,1,opt,name=PetID,proto3" json:"PetID"`
	PetLevelMin          int32    `protobuf:"varint,2,opt,name=PetLevelMin,proto3" json:"PetLevelMin"`
	PetLevelMax          int32    `protobuf:"varint,3,opt,name=PetLevelMax,proto3" json:"PetLevelMax"`
	MinBet               int32    `protobuf:"varint,4,opt,name=MinBet,proto3" json:"MinBet"`
	MaxBet               int32    `protobuf:"varint,5,opt,name=MaxBet,proto3" json:"MaxBet"`
	Modes                []int32  `protobuf:"varint,6,rep,packed,name=Modes,proto3" json:"Modes"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggyWheelCardLevelConfig) Reset()         { *m = PiggyWheelCardLevelConfig{} }
func (m *PiggyWheelCardLevelConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyWheelCardLevelConfig) ProtoMessage()    {}
func (*PiggyWheelCardLevelConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{8}
}
func (m *PiggyWheelCardLevelConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyWheelCardLevelConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyWheelCardLevelConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyWheelCardLevelConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyWheelCardLevelConfig.Merge(m, src)
}
func (m *PiggyWheelCardLevelConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyWheelCardLevelConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyWheelCardLevelConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyWheelCardLevelConfig proto.InternalMessageInfo

func (m *PiggyWheelCardLevelConfig) GetPetID() int32 {
	if m != nil {
		return m.PetID
	}
	return 0
}

func (m *PiggyWheelCardLevelConfig) GetPetLevelMin() int32 {
	if m != nil {
		return m.PetLevelMin
	}
	return 0
}

func (m *PiggyWheelCardLevelConfig) GetPetLevelMax() int32 {
	if m != nil {
		return m.PetLevelMax
	}
	return 0
}

func (m *PiggyWheelCardLevelConfig) GetMinBet() int32 {
	if m != nil {
		return m.MinBet
	}
	return 0
}

func (m *PiggyWheelCardLevelConfig) GetMaxBet() int32 {
	if m != nil {
		return m.MaxBet
	}
	return 0
}

func (m *PiggyWheelCardLevelConfig) GetModes() []int32 {
	if m != nil {
		return m.Modes
	}
	return nil
}

type PiggyWheelCardDefineConfig struct {
	Mode                 int32    `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode"`
	No                   int32    `protobuf:"varint,2,opt,name=No,proto3" json:"No"`
	GridRandCount        []int32  `protobuf:"varint,3,rep,packed,name=GridRandCount,proto3" json:"GridRandCount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggyWheelCardDefineConfig) Reset()         { *m = PiggyWheelCardDefineConfig{} }
func (m *PiggyWheelCardDefineConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyWheelCardDefineConfig) ProtoMessage()    {}
func (*PiggyWheelCardDefineConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{9}
}
func (m *PiggyWheelCardDefineConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyWheelCardDefineConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyWheelCardDefineConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyWheelCardDefineConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyWheelCardDefineConfig.Merge(m, src)
}
func (m *PiggyWheelCardDefineConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyWheelCardDefineConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyWheelCardDefineConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyWheelCardDefineConfig proto.InternalMessageInfo

func (m *PiggyWheelCardDefineConfig) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *PiggyWheelCardDefineConfig) GetNo() int32 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *PiggyWheelCardDefineConfig) GetGridRandCount() []int32 {
	if m != nil {
		return m.GridRandCount
	}
	return nil
}

type PiggyWheelCardBaseConfig struct {
	BasicCardNum         int32    `protobuf:"varint,1,opt,name=BasicCardNum,proto3" json:"BasicCardNum"`
	BasicCardFillGrid    []int32  `protobuf:"varint,2,rep,packed,name=BasicCardFillGrid,proto3" json:"BasicCardFillGrid"`
	IsOpen               int32    `protobuf:"varint,3,opt,name=IsOpen,proto3" json:"IsOpen"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggyWheelCardBaseConfig) Reset()         { *m = PiggyWheelCardBaseConfig{} }
func (m *PiggyWheelCardBaseConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyWheelCardBaseConfig) ProtoMessage()    {}
func (*PiggyWheelCardBaseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{10}
}
func (m *PiggyWheelCardBaseConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyWheelCardBaseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyWheelCardBaseConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyWheelCardBaseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyWheelCardBaseConfig.Merge(m, src)
}
func (m *PiggyWheelCardBaseConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyWheelCardBaseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyWheelCardBaseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyWheelCardBaseConfig proto.InternalMessageInfo

func (m *PiggyWheelCardBaseConfig) GetBasicCardNum() int32 {
	if m != nil {
		return m.BasicCardNum
	}
	return 0
}

func (m *PiggyWheelCardBaseConfig) GetBasicCardFillGrid() []int32 {
	if m != nil {
		return m.BasicCardFillGrid
	}
	return nil
}

func (m *PiggyWheelCardBaseConfig) GetIsOpen() int32 {
	if m != nil {
		return m.IsOpen
	}
	return 0
}

type PiggyWheelGridItem struct {
	ResultType           WheelResultType `protobuf:"varint,1,opt,name=ResultType,proto3,enum=proto.WheelResultType" json:"ResultType"`
	Count                int64           `protobuf:"varint,2,opt,name=Count,proto3" json:"Count"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PiggyWheelGridItem) Reset()         { *m = PiggyWheelGridItem{} }
func (m *PiggyWheelGridItem) String() string { return proto.CompactTextString(m) }
func (*PiggyWheelGridItem) ProtoMessage()    {}
func (*PiggyWheelGridItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{11}
}
func (m *PiggyWheelGridItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyWheelGridItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyWheelGridItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyWheelGridItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyWheelGridItem.Merge(m, src)
}
func (m *PiggyWheelGridItem) XXX_Size() int {
	return m.Size()
}
func (m *PiggyWheelGridItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyWheelGridItem.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyWheelGridItem proto.InternalMessageInfo

func (m *PiggyWheelGridItem) GetResultType() WheelResultType {
	if m != nil {
		return m.ResultType
	}
	return WheelResultTypeDefault
}

func (m *PiggyWheelGridItem) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type PiggyWheelGridContentConfig struct {
	Planet               int64                 `protobuf:"varint,1,opt,name=Planet,proto3" json:"Planet"`
	MaxEnergy            int64                 `protobuf:"varint,2,opt,name=MaxEnergy,proto3" json:"MaxEnergy"`
	RecoverEnergy        int64                 `protobuf:"varint,3,opt,name=RecoverEnergy,proto3" json:"RecoverEnergy"`
	RecoverInterval      int64                 `protobuf:"varint,4,opt,name=RecoverInterval,proto3" json:"RecoverInterval"`
	MaxShield            int64                 `protobuf:"varint,5,opt,name=MaxShield,proto3" json:"MaxShield"`
	Grids                []*PiggyWheelGridItem `protobuf:"bytes,6,rep,name=Grids,proto3" json:"Grids"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PiggyWheelGridContentConfig) Reset()         { *m = PiggyWheelGridContentConfig{} }
func (m *PiggyWheelGridContentConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyWheelGridContentConfig) ProtoMessage()    {}
func (*PiggyWheelGridContentConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{12}
}
func (m *PiggyWheelGridContentConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyWheelGridContentConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyWheelGridContentConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyWheelGridContentConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyWheelGridContentConfig.Merge(m, src)
}
func (m *PiggyWheelGridContentConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyWheelGridContentConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyWheelGridContentConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyWheelGridContentConfig proto.InternalMessageInfo

func (m *PiggyWheelGridContentConfig) GetPlanet() int64 {
	if m != nil {
		return m.Planet
	}
	return 0
}

func (m *PiggyWheelGridContentConfig) GetMaxEnergy() int64 {
	if m != nil {
		return m.MaxEnergy
	}
	return 0
}

func (m *PiggyWheelGridContentConfig) GetRecoverEnergy() int64 {
	if m != nil {
		return m.RecoverEnergy
	}
	return 0
}

func (m *PiggyWheelGridContentConfig) GetRecoverInterval() int64 {
	if m != nil {
		return m.RecoverInterval
	}
	return 0
}

func (m *PiggyWheelGridContentConfig) GetMaxShield() int64 {
	if m != nil {
		return m.MaxShield
	}
	return 0
}

func (m *PiggyWheelGridContentConfig) GetGrids() []*PiggyWheelGridItem {
	if m != nil {
		return m.Grids
	}
	return nil
}

type PiggyStealConfig struct {
	PlanetID             int32    `protobuf:"varint,1,opt,name=PlanetID,proto3" json:"PlanetID"`
	DailyLimit           int64    `protobuf:"varint,2,opt,name=DailyLimit,proto3" json:"DailyLimit"`
	CKMax                int64    `protobuf:"varint,3,opt,name=CKMax,proto3" json:"CKMax"`
	CKDelta              int64    `protobuf:"varint,4,opt,name=CKDelta,proto3" json:"CKDelta"`
	CKMin                int64    `protobuf:"varint,5,opt,name=CKMin,proto3" json:"CKMin"`
	SRMin                int64    `protobuf:"varint,6,opt,name=SRMin,proto3" json:"SRMin"`
	SRMax                int64    `protobuf:"varint,7,opt,name=SRMax,proto3" json:"SRMax"`
	BRMin                int64    `protobuf:"varint,8,opt,name=BRMin,proto3" json:"BRMin"`
	BRMax                int64    `protobuf:"varint,9,opt,name=BRMax,proto3" json:"BRMax"`
	RobotSpaceMin        int32    `protobuf:"varint,10,opt,name=RobotSpaceMin,proto3" json:"RobotSpaceMin"`
	RobotSpaceMax        int32    `protobuf:"varint,11,opt,name=RobotSpaceMax,proto3" json:"RobotSpaceMax"`
	SideMin              int64    `protobuf:"varint,12,opt,name=SideMin,proto3" json:"SideMin"`
	SideMax              int64    `protobuf:"varint,13,opt,name=SideMax,proto3" json:"SideMax"`
	StolenTimesProtected int32    `protobuf:"varint,14,opt,name=StolenTimesProtected,proto3" json:"StolenTimesProtected"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggyStealConfig) Reset()         { *m = PiggyStealConfig{} }
func (m *PiggyStealConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyStealConfig) ProtoMessage()    {}
func (*PiggyStealConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{13}
}
func (m *PiggyStealConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyStealConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyStealConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyStealConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyStealConfig.Merge(m, src)
}
func (m *PiggyStealConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyStealConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyStealConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyStealConfig proto.InternalMessageInfo

func (m *PiggyStealConfig) GetPlanetID() int32 {
	if m != nil {
		return m.PlanetID
	}
	return 0
}

func (m *PiggyStealConfig) GetDailyLimit() int64 {
	if m != nil {
		return m.DailyLimit
	}
	return 0
}

func (m *PiggyStealConfig) GetCKMax() int64 {
	if m != nil {
		return m.CKMax
	}
	return 0
}

func (m *PiggyStealConfig) GetCKDelta() int64 {
	if m != nil {
		return m.CKDelta
	}
	return 0
}

func (m *PiggyStealConfig) GetCKMin() int64 {
	if m != nil {
		return m.CKMin
	}
	return 0
}

func (m *PiggyStealConfig) GetSRMin() int64 {
	if m != nil {
		return m.SRMin
	}
	return 0
}

func (m *PiggyStealConfig) GetSRMax() int64 {
	if m != nil {
		return m.SRMax
	}
	return 0
}

func (m *PiggyStealConfig) GetBRMin() int64 {
	if m != nil {
		return m.BRMin
	}
	return 0
}

func (m *PiggyStealConfig) GetBRMax() int64 {
	if m != nil {
		return m.BRMax
	}
	return 0
}

func (m *PiggyStealConfig) GetRobotSpaceMin() int32 {
	if m != nil {
		return m.RobotSpaceMin
	}
	return 0
}

func (m *PiggyStealConfig) GetRobotSpaceMax() int32 {
	if m != nil {
		return m.RobotSpaceMax
	}
	return 0
}

func (m *PiggyStealConfig) GetSideMin() int64 {
	if m != nil {
		return m.SideMin
	}
	return 0
}

func (m *PiggyStealConfig) GetSideMax() int64 {
	if m != nil {
		return m.SideMax
	}
	return 0
}

func (m *PiggyStealConfig) GetStolenTimesProtected() int32 {
	if m != nil {
		return m.StolenTimesProtected
	}
	return 0
}

type PiggyStealConstantConfig struct {
	CKLockedLimit        int32    `protobuf:"varint,1,opt,name=CKLockedLimit,proto3" json:"CKLockedLimit"`
	CKType               []CKType `protobuf:"varint,2,rep,packed,name=CKType,proto3,enum=proto.CKType" json:"CKType"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggyStealConstantConfig) Reset()         { *m = PiggyStealConstantConfig{} }
func (m *PiggyStealConstantConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyStealConstantConfig) ProtoMessage()    {}
func (*PiggyStealConstantConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{14}
}
func (m *PiggyStealConstantConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyStealConstantConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyStealConstantConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyStealConstantConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyStealConstantConfig.Merge(m, src)
}
func (m *PiggyStealConstantConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyStealConstantConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyStealConstantConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyStealConstantConfig proto.InternalMessageInfo

func (m *PiggyStealConstantConfig) GetCKLockedLimit() int32 {
	if m != nil {
		return m.CKLockedLimit
	}
	return 0
}

func (m *PiggyStealConstantConfig) GetCKType() []CKType {
	if m != nil {
		return m.CKType
	}
	return nil
}

// 审核
type AccReviewConfig struct {
	IsReview             bool     `protobuf:"varint,1,opt,name=IsReview,proto3" json:"IsReview"`
	Version              string   `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccReviewConfig) Reset()         { *m = AccReviewConfig{} }
func (m *AccReviewConfig) String() string { return proto.CompactTextString(m) }
func (*AccReviewConfig) ProtoMessage()    {}
func (*AccReviewConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{15}
}
func (m *AccReviewConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccReviewConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccReviewConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccReviewConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccReviewConfig.Merge(m, src)
}
func (m *AccReviewConfig) XXX_Size() int {
	return m.Size()
}
func (m *AccReviewConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AccReviewConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AccReviewConfig proto.InternalMessageInfo

func (m *AccReviewConfig) GetIsReview() bool {
	if m != nil {
		return m.IsReview
	}
	return false
}

func (m *AccReviewConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type AccPauseConfig struct {
	IsPause              bool                        `protobuf:"varint,1,opt,name=IsPause,proto3" json:"IsPause"`
	Contents             []*AccLanguageContentConfig `protobuf:"bytes,2,rep,name=Contents,proto3" json:"Contents"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AccPauseConfig) Reset()         { *m = AccPauseConfig{} }
func (m *AccPauseConfig) String() string { return proto.CompactTextString(m) }
func (*AccPauseConfig) ProtoMessage()    {}
func (*AccPauseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{16}
}
func (m *AccPauseConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccPauseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccPauseConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccPauseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccPauseConfig.Merge(m, src)
}
func (m *AccPauseConfig) XXX_Size() int {
	return m.Size()
}
func (m *AccPauseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AccPauseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AccPauseConfig proto.InternalMessageInfo

func (m *AccPauseConfig) GetIsPause() bool {
	if m != nil {
		return m.IsPause
	}
	return false
}

func (m *AccPauseConfig) GetContents() []*AccLanguageContentConfig {
	if m != nil {
		return m.Contents
	}
	return nil
}

type AccLanguageContentConfig struct {
	Lang                 string   `protobuf:"bytes,1,opt,name=Lang,proto3" json:"Lang"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccLanguageContentConfig) Reset()         { *m = AccLanguageContentConfig{} }
func (m *AccLanguageContentConfig) String() string { return proto.CompactTextString(m) }
func (*AccLanguageContentConfig) ProtoMessage()    {}
func (*AccLanguageContentConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{17}
}
func (m *AccLanguageContentConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccLanguageContentConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccLanguageContentConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccLanguageContentConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccLanguageContentConfig.Merge(m, src)
}
func (m *AccLanguageContentConfig) XXX_Size() int {
	return m.Size()
}
func (m *AccLanguageContentConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AccLanguageContentConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AccLanguageContentConfig proto.InternalMessageInfo

func (m *AccLanguageContentConfig) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *AccLanguageContentConfig) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type AccAppUpdateConfig struct {
	Device               string                      `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device"`
	MinVersion           string                      `protobuf:"bytes,2,opt,name=MinVersion,proto3" json:"MinVersion"`
	PromptVersion        string                      `protobuf:"bytes,3,opt,name=PromptVersion,proto3" json:"PromptVersion"`
	Contents             []*AccLanguageContentConfig `protobuf:"bytes,4,rep,name=Contents,proto3" json:"Contents"`
	Channel              string                      `protobuf:"bytes,5,opt,name=Channel,proto3" json:"Channel"`
	DownloadUrl          string                      `protobuf:"bytes,6,opt,name=DownloadUrl,proto3" json:"DownloadUrl"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AccAppUpdateConfig) Reset()         { *m = AccAppUpdateConfig{} }
func (m *AccAppUpdateConfig) String() string { return proto.CompactTextString(m) }
func (*AccAppUpdateConfig) ProtoMessage()    {}
func (*AccAppUpdateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{18}
}
func (m *AccAppUpdateConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccAppUpdateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccAppUpdateConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccAppUpdateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccAppUpdateConfig.Merge(m, src)
}
func (m *AccAppUpdateConfig) XXX_Size() int {
	return m.Size()
}
func (m *AccAppUpdateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AccAppUpdateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AccAppUpdateConfig proto.InternalMessageInfo

func (m *AccAppUpdateConfig) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AccAppUpdateConfig) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

func (m *AccAppUpdateConfig) GetPromptVersion() string {
	if m != nil {
		return m.PromptVersion
	}
	return ""
}

func (m *AccAppUpdateConfig) GetContents() []*AccLanguageContentConfig {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *AccAppUpdateConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *AccAppUpdateConfig) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

type FuncSwitchConfig struct {
	Device               string   `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device"`
	CodeVersion          string   `protobuf:"bytes,2,opt,name=CodeVersion,proto3" json:"CodeVersion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FuncSwitchConfig) Reset()         { *m = FuncSwitchConfig{} }
func (m *FuncSwitchConfig) String() string { return proto.CompactTextString(m) }
func (*FuncSwitchConfig) ProtoMessage()    {}
func (*FuncSwitchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{19}
}
func (m *FuncSwitchConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FuncSwitchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FuncSwitchConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FuncSwitchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuncSwitchConfig.Merge(m, src)
}
func (m *FuncSwitchConfig) XXX_Size() int {
	return m.Size()
}
func (m *FuncSwitchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FuncSwitchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FuncSwitchConfig proto.InternalMessageInfo

func (m *FuncSwitchConfig) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *FuncSwitchConfig) GetCodeVersion() string {
	if m != nil {
		return m.CodeVersion
	}
	return ""
}

// 热更
type HotFix struct {
	Revision             int64    `protobuf:"varint,1,opt,name=Revision,proto3" json:"Revision"`
	ForceUpdate          string   `protobuf:"bytes,2,opt,name=ForceUpdate,proto3" json:"ForceUpdate"`
	FileName             string   `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName"`
	FileSize             string   `protobuf:"bytes,4,opt,name=FileSize,proto3" json:"FileSize"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotFix) Reset()         { *m = HotFix{} }
func (m *HotFix) String() string { return proto.CompactTextString(m) }
func (*HotFix) ProtoMessage()    {}
func (*HotFix) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{20}
}
func (m *HotFix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotFix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotFix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotFix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotFix.Merge(m, src)
}
func (m *HotFix) XXX_Size() int {
	return m.Size()
}
func (m *HotFix) XXX_DiscardUnknown() {
	xxx_messageInfo_HotFix.DiscardUnknown(m)
}

var xxx_messageInfo_HotFix proto.InternalMessageInfo

func (m *HotFix) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *HotFix) GetForceUpdate() string {
	if m != nil {
		return m.ForceUpdate
	}
	return ""
}

func (m *HotFix) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *HotFix) GetFileSize() string {
	if m != nil {
		return m.FileSize
	}
	return ""
}

// 热更
type AccHotFixConfig struct {
	Revision             int64    `protobuf:"varint,1,opt,name=Revision,proto3" json:"Revision"`
	ForceUpdate          string   `protobuf:"bytes,2,opt,name=ForceUpdate,proto3" json:"ForceUpdate"`
	FileName             string   `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName"`
	FileSize             string   `protobuf:"bytes,4,opt,name=FileSize,proto3" json:"FileSize"`
	Device               string   `protobuf:"bytes,5,opt,name=Device,proto3" json:"Device"`
	Platform             string   `protobuf:"bytes,6,opt,name=Platform,proto3" json:"Platform"`
	Version              string   `protobuf:"bytes,7,opt,name=Version,proto3" json:"Version"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccHotFixConfig) Reset()         { *m = AccHotFixConfig{} }
func (m *AccHotFixConfig) String() string { return proto.CompactTextString(m) }
func (*AccHotFixConfig) ProtoMessage()    {}
func (*AccHotFixConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{21}
}
func (m *AccHotFixConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccHotFixConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccHotFixConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccHotFixConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccHotFixConfig.Merge(m, src)
}
func (m *AccHotFixConfig) XXX_Size() int {
	return m.Size()
}
func (m *AccHotFixConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AccHotFixConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AccHotFixConfig proto.InternalMessageInfo

func (m *AccHotFixConfig) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *AccHotFixConfig) GetForceUpdate() string {
	if m != nil {
		return m.ForceUpdate
	}
	return ""
}

func (m *AccHotFixConfig) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *AccHotFixConfig) GetFileSize() string {
	if m != nil {
		return m.FileSize
	}
	return ""
}

func (m *AccHotFixConfig) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AccHotFixConfig) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *AccHotFixConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type BindRewardConfig struct {
	LoginType            LoginType `protobuf:"varint,1,opt,name=LoginType,proto3,enum=proto.LoginType" json:"LoginType"`
	Rewards              []*Reward `protobuf:"bytes,2,rep,name=Rewards,proto3" json:"Rewards"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BindRewardConfig) Reset()         { *m = BindRewardConfig{} }
func (m *BindRewardConfig) String() string { return proto.CompactTextString(m) }
func (*BindRewardConfig) ProtoMessage()    {}
func (*BindRewardConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{22}
}
func (m *BindRewardConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindRewardConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindRewardConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindRewardConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindRewardConfig.Merge(m, src)
}
func (m *BindRewardConfig) XXX_Size() int {
	return m.Size()
}
func (m *BindRewardConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BindRewardConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BindRewardConfig proto.InternalMessageInfo

func (m *BindRewardConfig) GetLoginType() LoginType {
	if m != nil {
		return m.LoginType
	}
	return LoginTypeGuest
}

func (m *BindRewardConfig) GetRewards() []*Reward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 宠物与玩具的映射关系
type PiggyPetToyMapConfig struct {
	PetID                int64    `protobuf:"varint,1,opt,name=PetID,proto3" json:"PetID"`
	ToyID                int64    `protobuf:"varint,2,opt,name=ToyID,proto3" json:"ToyID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggyPetToyMapConfig) Reset()         { *m = PiggyPetToyMapConfig{} }
func (m *PiggyPetToyMapConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyPetToyMapConfig) ProtoMessage()    {}
func (*PiggyPetToyMapConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{23}
}
func (m *PiggyPetToyMapConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyPetToyMapConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyPetToyMapConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyPetToyMapConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyPetToyMapConfig.Merge(m, src)
}
func (m *PiggyPetToyMapConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyPetToyMapConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyPetToyMapConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyPetToyMapConfig proto.InternalMessageInfo

func (m *PiggyPetToyMapConfig) GetPetID() int64 {
	if m != nil {
		return m.PetID
	}
	return 0
}

func (m *PiggyPetToyMapConfig) GetToyID() int64 {
	if m != nil {
		return m.ToyID
	}
	return 0
}

type PiggyPetWheelMoneyExtra struct {
	Level                int64    `protobuf:"varint,1,opt,name=Level,proto3" json:"Level"`
	ExtraPercent         int64    `protobuf:"varint,2,opt,name=ExtraPercent,proto3" json:"ExtraPercent"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggyPetWheelMoneyExtra) Reset()         { *m = PiggyPetWheelMoneyExtra{} }
func (m *PiggyPetWheelMoneyExtra) String() string { return proto.CompactTextString(m) }
func (*PiggyPetWheelMoneyExtra) ProtoMessage()    {}
func (*PiggyPetWheelMoneyExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{24}
}
func (m *PiggyPetWheelMoneyExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyPetWheelMoneyExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyPetWheelMoneyExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyPetWheelMoneyExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyPetWheelMoneyExtra.Merge(m, src)
}
func (m *PiggyPetWheelMoneyExtra) XXX_Size() int {
	return m.Size()
}
func (m *PiggyPetWheelMoneyExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyPetWheelMoneyExtra.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyPetWheelMoneyExtra proto.InternalMessageInfo

func (m *PiggyPetWheelMoneyExtra) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PiggyPetWheelMoneyExtra) GetExtraPercent() int64 {
	if m != nil {
		return m.ExtraPercent
	}
	return 0
}

type PiggyPetWheelMoneyConfig struct {
	PetID                int64                      `protobuf:"varint,1,opt,name=PetID,proto3" json:"PetID"`
	PetLevel             int64                      `protobuf:"varint,2,opt,name=PetLevel,proto3" json:"PetLevel"`
	BasePercent          int64                      `protobuf:"varint,4,opt,name=BasePercent,proto3" json:"BasePercent"`
	ToyExtra             []*PiggyPetWheelMoneyExtra `protobuf:"bytes,5,rep,name=ToyExtra,proto3" json:"ToyExtra"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PiggyPetWheelMoneyConfig) Reset()         { *m = PiggyPetWheelMoneyConfig{} }
func (m *PiggyPetWheelMoneyConfig) String() string { return proto.CompactTextString(m) }
func (*PiggyPetWheelMoneyConfig) ProtoMessage()    {}
func (*PiggyPetWheelMoneyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{25}
}
func (m *PiggyPetWheelMoneyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggyPetWheelMoneyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggyPetWheelMoneyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggyPetWheelMoneyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggyPetWheelMoneyConfig.Merge(m, src)
}
func (m *PiggyPetWheelMoneyConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggyPetWheelMoneyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggyPetWheelMoneyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggyPetWheelMoneyConfig proto.InternalMessageInfo

func (m *PiggyPetWheelMoneyConfig) GetPetID() int64 {
	if m != nil {
		return m.PetID
	}
	return 0
}

func (m *PiggyPetWheelMoneyConfig) GetPetLevel() int64 {
	if m != nil {
		return m.PetLevel
	}
	return 0
}

func (m *PiggyPetWheelMoneyConfig) GetBasePercent() int64 {
	if m != nil {
		return m.BasePercent
	}
	return 0
}

func (m *PiggyPetWheelMoneyConfig) GetToyExtra() []*PiggyPetWheelMoneyExtra {
	if m != nil {
		return m.ToyExtra
	}
	return nil
}

type MsgCenterSteal struct {
	Money                string   `protobuf:"bytes,1,opt,name=money,proto3" json:"money"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgCenterSteal) Reset()         { *m = MsgCenterSteal{} }
func (m *MsgCenterSteal) String() string { return proto.CompactTextString(m) }
func (*MsgCenterSteal) ProtoMessage()    {}
func (*MsgCenterSteal) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{26}
}
func (m *MsgCenterSteal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCenterSteal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCenterSteal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCenterSteal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCenterSteal.Merge(m, src)
}
func (m *MsgCenterSteal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCenterSteal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCenterSteal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCenterSteal proto.InternalMessageInfo

func (m *MsgCenterSteal) GetMoney() string {
	if m != nil {
		return m.Money
	}
	return ""
}

type MsgCenterPetSteal struct {
	Money                string   `protobuf:"bytes,1,opt,name=money,proto3" json:"money"`
	PetId                int32    `protobuf:"varint,2,opt,name=petId,proto3" json:"petId"`
	PetSubMoney          string   `protobuf:"bytes,3,opt,name=petSubMoney,proto3" json:"petSubMoney"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgCenterPetSteal) Reset()         { *m = MsgCenterPetSteal{} }
func (m *MsgCenterPetSteal) String() string { return proto.CompactTextString(m) }
func (*MsgCenterPetSteal) ProtoMessage()    {}
func (*MsgCenterPetSteal) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{27}
}
func (m *MsgCenterPetSteal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCenterPetSteal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCenterPetSteal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCenterPetSteal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCenterPetSteal.Merge(m, src)
}
func (m *MsgCenterPetSteal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCenterPetSteal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCenterPetSteal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCenterPetSteal proto.InternalMessageInfo

func (m *MsgCenterPetSteal) GetMoney() string {
	if m != nil {
		return m.Money
	}
	return ""
}

func (m *MsgCenterPetSteal) GetPetId() int32 {
	if m != nil {
		return m.PetId
	}
	return 0
}

func (m *MsgCenterPetSteal) GetPetSubMoney() string {
	if m != nil {
		return m.PetSubMoney
	}
	return ""
}

// 机器人
type PiggySlotRobotFakeConfig struct {
	PlanetRandChangeLeft  uint32   `protobuf:"varint,1,opt,name=PlanetRandChangeLeft,proto3" json:"PlanetRandChangeLeft"`
	PlanetRandChangeRight uint32   `protobuf:"varint,2,opt,name=PlanetRandChangeRight,proto3" json:"PlanetRandChangeRight"`
	ShieldRate            uint32   `protobuf:"varint,3,opt,name=ShieldRate,proto3" json:"ShieldRate"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PiggySlotRobotFakeConfig) Reset()         { *m = PiggySlotRobotFakeConfig{} }
func (m *PiggySlotRobotFakeConfig) String() string { return proto.CompactTextString(m) }
func (*PiggySlotRobotFakeConfig) ProtoMessage()    {}
func (*PiggySlotRobotFakeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{28}
}
func (m *PiggySlotRobotFakeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggySlotRobotFakeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggySlotRobotFakeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggySlotRobotFakeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggySlotRobotFakeConfig.Merge(m, src)
}
func (m *PiggySlotRobotFakeConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggySlotRobotFakeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggySlotRobotFakeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggySlotRobotFakeConfig proto.InternalMessageInfo

func (m *PiggySlotRobotFakeConfig) GetPlanetRandChangeLeft() uint32 {
	if m != nil {
		return m.PlanetRandChangeLeft
	}
	return 0
}

func (m *PiggySlotRobotFakeConfig) GetPlanetRandChangeRight() uint32 {
	if m != nil {
		return m.PlanetRandChangeRight
	}
	return 0
}

func (m *PiggySlotRobotFakeConfig) GetShieldRate() uint32 {
	if m != nil {
		return m.ShieldRate
	}
	return 0
}

type PiggySlotRobotLimitConfig struct {
	Planet               int64    `protobuf:"varint,1,opt,name=Planet,proto3" json:"Planet"`
	RobotStealMax        int64    `protobuf:"varint,2,opt,name=RobotStealMax,proto3" json:"RobotStealMax"`
	RobotStealMin        int64    `protobuf:"varint,3,opt,name=RobotStealMin,proto3" json:"RobotStealMin"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiggySlotRobotLimitConfig) Reset()         { *m = PiggySlotRobotLimitConfig{} }
func (m *PiggySlotRobotLimitConfig) String() string { return proto.CompactTextString(m) }
func (*PiggySlotRobotLimitConfig) ProtoMessage()    {}
func (*PiggySlotRobotLimitConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{29}
}
func (m *PiggySlotRobotLimitConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PiggySlotRobotLimitConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PiggySlotRobotLimitConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PiggySlotRobotLimitConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiggySlotRobotLimitConfig.Merge(m, src)
}
func (m *PiggySlotRobotLimitConfig) XXX_Size() int {
	return m.Size()
}
func (m *PiggySlotRobotLimitConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiggySlotRobotLimitConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiggySlotRobotLimitConfig proto.InternalMessageInfo

func (m *PiggySlotRobotLimitConfig) GetPlanet() int64 {
	if m != nil {
		return m.Planet
	}
	return 0
}

func (m *PiggySlotRobotLimitConfig) GetRobotStealMax() int64 {
	if m != nil {
		return m.RobotStealMax
	}
	return 0
}

func (m *PiggySlotRobotLimitConfig) GetRobotStealMin() int64 {
	if m != nil {
		return m.RobotStealMin
	}
	return 0
}

type StolenDailyData struct {
	StolenRecord         []*StealRecord `protobuf:"bytes,1,rep,name=StolenRecord,proto3" json:"StolenRecord"`
	StealMoney           int64          `protobuf:"varint,2,opt,name=StealMoney,proto3" json:"StealMoney"`
	LastStolenTime       int64          `protobuf:"varint,3,opt,name=LastStolenTime,proto3" json:"LastStolenTime"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StolenDailyData) Reset()         { *m = StolenDailyData{} }
func (m *StolenDailyData) String() string { return proto.CompactTextString(m) }
func (*StolenDailyData) ProtoMessage()    {}
func (*StolenDailyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{30}
}
func (m *StolenDailyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StolenDailyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StolenDailyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StolenDailyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StolenDailyData.Merge(m, src)
}
func (m *StolenDailyData) XXX_Size() int {
	return m.Size()
}
func (m *StolenDailyData) XXX_DiscardUnknown() {
	xxx_messageInfo_StolenDailyData.DiscardUnknown(m)
}

var xxx_messageInfo_StolenDailyData proto.InternalMessageInfo

func (m *StolenDailyData) GetStolenRecord() []*StealRecord {
	if m != nil {
		return m.StolenRecord
	}
	return nil
}

func (m *StolenDailyData) GetStealMoney() int64 {
	if m != nil {
		return m.StealMoney
	}
	return 0
}

func (m *StolenDailyData) GetLastStolenTime() int64 {
	if m != nil {
		return m.LastStolenTime
	}
	return 0
}

type CKLockedData struct {
	UID                  string   `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID"`
	LockTime             int64    `protobuf:"varint,2,opt,name=LockTime,proto3" json:"LockTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CKLockedData) Reset()         { *m = CKLockedData{} }
func (m *CKLockedData) String() string { return proto.CompactTextString(m) }
func (*CKLockedData) ProtoMessage()    {}
func (*CKLockedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{31}
}
func (m *CKLockedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CKLockedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CKLockedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CKLockedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CKLockedData.Merge(m, src)
}
func (m *CKLockedData) XXX_Size() int {
	return m.Size()
}
func (m *CKLockedData) XXX_DiscardUnknown() {
	xxx_messageInfo_CKLockedData.DiscardUnknown(m)
}

var xxx_messageInfo_CKLockedData proto.InternalMessageInfo

func (m *CKLockedData) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *CKLockedData) GetLockTime() int64 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

type FriendCKData struct {
	UID                  string           `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID"`
	Money                int64            `protobuf:"varint,2,opt,name=Money,proto3" json:"Money"`
	LockData             []*CKLockedData  `protobuf:"bytes,3,rep,name=LockData,proto3" json:"LockData"`
	StolenData           *StolenDailyData `protobuf:"bytes,4,opt,name=StolenData,proto3" json:"StolenData"`
	LastLoginTime        int64            `protobuf:"varint,5,opt,name=LastLoginTime,proto3" json:"LastLoginTime"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FriendCKData) Reset()         { *m = FriendCKData{} }
func (m *FriendCKData) String() string { return proto.CompactTextString(m) }
func (*FriendCKData) ProtoMessage()    {}
func (*FriendCKData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{32}
}
func (m *FriendCKData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendCKData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendCKData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendCKData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendCKData.Merge(m, src)
}
func (m *FriendCKData) XXX_Size() int {
	return m.Size()
}
func (m *FriendCKData) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendCKData.DiscardUnknown(m)
}

var xxx_messageInfo_FriendCKData proto.InternalMessageInfo

func (m *FriendCKData) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *FriendCKData) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *FriendCKData) GetLockData() []*CKLockedData {
	if m != nil {
		return m.LockData
	}
	return nil
}

func (m *FriendCKData) GetStolenData() *StolenDailyData {
	if m != nil {
		return m.StolenData
	}
	return nil
}

func (m *FriendCKData) GetLastLoginTime() int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

type StealRecord struct {
	UID                  string   `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID"`
	Money                int64    `protobuf:"varint,2,opt,name=Money,proto3" json:"Money"`
	StealTime            int64    `protobuf:"varint,3,opt,name=StealTime,proto3" json:"StealTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StealRecord) Reset()         { *m = StealRecord{} }
func (m *StealRecord) String() string { return proto.CompactTextString(m) }
func (*StealRecord) ProtoMessage()    {}
func (*StealRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{33}
}
func (m *StealRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StealRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StealRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StealRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StealRecord.Merge(m, src)
}
func (m *StealRecord) XXX_Size() int {
	return m.Size()
}
func (m *StealRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StealRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StealRecord proto.InternalMessageInfo

func (m *StealRecord) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *StealRecord) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *StealRecord) GetStealTime() int64 {
	if m != nil {
		return m.StealTime
	}
	return 0
}

type StealDailyData struct {
	StealMoney           int64          `protobuf:"varint,1,opt,name=StealMoney,proto3" json:"StealMoney"`
	StealPlayerTimes     int64          `protobuf:"varint,2,opt,name=StealPlayerTimes,proto3" json:"StealPlayerTimes"`
	StealRobotTimes      int64          `protobuf:"varint,3,opt,name=StealRobotTimes,proto3" json:"StealRobotTimes"`
	StealRecord          []*StealRecord `protobuf:"bytes,4,rep,name=StealRecord,proto3" json:"StealRecord"`
	LastStealTime        int64          `protobuf:"varint,5,opt,name=LastStealTime,proto3" json:"LastStealTime"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StealDailyData) Reset()         { *m = StealDailyData{} }
func (m *StealDailyData) String() string { return proto.CompactTextString(m) }
func (*StealDailyData) ProtoMessage()    {}
func (*StealDailyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{34}
}
func (m *StealDailyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StealDailyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StealDailyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StealDailyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StealDailyData.Merge(m, src)
}
func (m *StealDailyData) XXX_Size() int {
	return m.Size()
}
func (m *StealDailyData) XXX_DiscardUnknown() {
	xxx_messageInfo_StealDailyData.DiscardUnknown(m)
}

var xxx_messageInfo_StealDailyData proto.InternalMessageInfo

func (m *StealDailyData) GetStealMoney() int64 {
	if m != nil {
		return m.StealMoney
	}
	return 0
}

func (m *StealDailyData) GetStealPlayerTimes() int64 {
	if m != nil {
		return m.StealPlayerTimes
	}
	return 0
}

func (m *StealDailyData) GetStealRobotTimes() int64 {
	if m != nil {
		return m.StealRobotTimes
	}
	return 0
}

func (m *StealDailyData) GetStealRecord() []*StealRecord {
	if m != nil {
		return m.StealRecord
	}
	return nil
}

func (m *StealDailyData) GetLastStealTime() int64 {
	if m != nil {
		return m.LastStealTime
	}
	return 0
}

type CKData struct {
	UID                  string          `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID"`
	Money                int64           `protobuf:"varint,2,opt,name=Money,proto3" json:"Money"`
	Profile              *UserProfile    `protobuf:"bytes,3,opt,name=Profile,proto3" json:"Profile"`
	IsVip                bool            `protobuf:"varint,4,opt,name=IsVip,proto3" json:"IsVip"`
	IsRobot              bool            `protobuf:"varint,5,opt,name=IsRobot,proto3" json:"IsRobot"`
	LockTime             int64           `protobuf:"varint,6,opt,name=LockTime,proto3" json:"LockTime"`
	CurPlanet            int64           `protobuf:"varint,7,opt,name=CurPlanet,proto3" json:"CurPlanet"`
	Buildings            []*BuildingInfo `protobuf:"bytes,8,rep,name=Buildings,proto3" json:"Buildings"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CKData) Reset()         { *m = CKData{} }
func (m *CKData) String() string { return proto.CompactTextString(m) }
func (*CKData) ProtoMessage()    {}
func (*CKData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{35}
}
func (m *CKData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CKData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CKData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CKData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CKData.Merge(m, src)
}
func (m *CKData) XXX_Size() int {
	return m.Size()
}
func (m *CKData) XXX_DiscardUnknown() {
	xxx_messageInfo_CKData.DiscardUnknown(m)
}

var xxx_messageInfo_CKData proto.InternalMessageInfo

func (m *CKData) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *CKData) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *CKData) GetProfile() *UserProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *CKData) GetIsVip() bool {
	if m != nil {
		return m.IsVip
	}
	return false
}

func (m *CKData) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *CKData) GetLockTime() int64 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *CKData) GetCurPlanet() int64 {
	if m != nil {
		return m.CurPlanet
	}
	return 0
}

func (m *CKData) GetBuildings() []*BuildingInfo {
	if m != nil {
		return m.Buildings
	}
	return nil
}

type PlanetInfo struct {
	CurPlanet            int64           `protobuf:"varint,1,opt,name=CurPlanet,proto3" json:"CurPlanet"`
	Star                 int64           `protobuf:"varint,2,opt,name=Star,proto3" json:"Star"`
	Buildings            []*BuildingInfo `protobuf:"bytes,3,rep,name=Buildings,proto3" json:"Buildings"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PlanetInfo) Reset()         { *m = PlanetInfo{} }
func (m *PlanetInfo) String() string { return proto.CompactTextString(m) }
func (*PlanetInfo) ProtoMessage()    {}
func (*PlanetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{36}
}
func (m *PlanetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlanetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlanetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlanetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanetInfo.Merge(m, src)
}
func (m *PlanetInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlanetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlanetInfo proto.InternalMessageInfo

func (m *PlanetInfo) GetCurPlanet() int64 {
	if m != nil {
		return m.CurPlanet
	}
	return 0
}

func (m *PlanetInfo) GetStar() int64 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *PlanetInfo) GetBuildings() []*BuildingInfo {
	if m != nil {
		return m.Buildings
	}
	return nil
}

type BuildingInfo struct {
	Lv                    int64          `protobuf:"varint,1,opt,name=Lv,proto3" json:"Lv"`
	Status                BuildingStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=proto.BuildingStatus" json:"Status"`
	IsMiniShieldProtected bool           `protobuf:"varint,3,opt,name=IsMiniShieldProtected,proto3" json:"IsMiniShieldProtected"`
	XXX_NoUnkeyedLiteral  struct{}       `json:"-"`
	XXX_unrecognized      []byte         `json:"-"`
	XXX_sizecache         int32          `json:"-"`
}

func (m *BuildingInfo) Reset()         { *m = BuildingInfo{} }
func (m *BuildingInfo) String() string { return proto.CompactTextString(m) }
func (*BuildingInfo) ProtoMessage()    {}
func (*BuildingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{37}
}
func (m *BuildingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingInfo.Merge(m, src)
}
func (m *BuildingInfo) XXX_Size() int {
	return m.Size()
}
func (m *BuildingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingInfo proto.InternalMessageInfo

func (m *BuildingInfo) GetLv() int64 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *BuildingInfo) GetStatus() BuildingStatus {
	if m != nil {
		return m.Status
	}
	return BuildingStatusNormal
}

func (m *BuildingInfo) GetIsMiniShieldProtected() bool {
	if m != nil {
		return m.IsMiniShieldProtected
	}
	return false
}

func init() {
	proto.RegisterType((*CommonRewardItem)(nil), "proto.CommonRewardItem")
	proto.RegisterType((*SdkUserInfo)(nil), "proto.SdkUserInfo")
	proto.RegisterType((*AppUpdateInfo)(nil), "proto.AppUpdateInfo")
	proto.RegisterType((*ServerInfo)(nil), "proto.ServerInfo")
	proto.RegisterType((*ResourceInfo)(nil), "proto.ResourceInfo")
	proto.RegisterType((*Reward)(nil), "proto.Reward")
	proto.RegisterType((*Consume)(nil), "proto.Consume")
	proto.RegisterType((*UserProfile)(nil), "proto.UserProfile")
	proto.RegisterType((*PiggyWheelCardLevelConfig)(nil), "proto.PiggyWheelCardLevelConfig")
	proto.RegisterType((*PiggyWheelCardDefineConfig)(nil), "proto.PiggyWheelCardDefineConfig")
	proto.RegisterType((*PiggyWheelCardBaseConfig)(nil), "proto.PiggyWheelCardBaseConfig")
	proto.RegisterType((*PiggyWheelGridItem)(nil), "proto.PiggyWheelGridItem")
	proto.RegisterType((*PiggyWheelGridContentConfig)(nil), "proto.PiggyWheelGridContentConfig")
	proto.RegisterType((*PiggyStealConfig)(nil), "proto.PiggyStealConfig")
	proto.RegisterType((*PiggyStealConstantConfig)(nil), "proto.PiggyStealConstantConfig")
	proto.RegisterType((*AccReviewConfig)(nil), "proto.AccReviewConfig")
	proto.RegisterType((*AccPauseConfig)(nil), "proto.AccPauseConfig")
	proto.RegisterType((*AccLanguageContentConfig)(nil), "proto.AccLanguageContentConfig")
	proto.RegisterType((*AccAppUpdateConfig)(nil), "proto.AccAppUpdateConfig")
	proto.RegisterType((*FuncSwitchConfig)(nil), "proto.FuncSwitchConfig")
	proto.RegisterType((*HotFix)(nil), "proto.HotFix")
	proto.RegisterType((*AccHotFixConfig)(nil), "proto.AccHotFixConfig")
	proto.RegisterType((*BindRewardConfig)(nil), "proto.BindRewardConfig")
	proto.RegisterType((*PiggyPetToyMapConfig)(nil), "proto.PiggyPetToyMapConfig")
	proto.RegisterType((*PiggyPetWheelMoneyExtra)(nil), "proto.PiggyPetWheelMoneyExtra")
	proto.RegisterType((*PiggyPetWheelMoneyConfig)(nil), "proto.PiggyPetWheelMoneyConfig")
	proto.RegisterType((*MsgCenterSteal)(nil), "proto.MsgCenterSteal")
	proto.RegisterType((*MsgCenterPetSteal)(nil), "proto.MsgCenterPetSteal")
	proto.RegisterType((*PiggySlotRobotFakeConfig)(nil), "proto.PiggySlotRobotFakeConfig")
	proto.RegisterType((*PiggySlotRobotLimitConfig)(nil), "proto.PiggySlotRobotLimitConfig")
	proto.RegisterType((*StolenDailyData)(nil), "proto.StolenDailyData")
	proto.RegisterType((*CKLockedData)(nil), "proto.CKLockedData")
	proto.RegisterType((*FriendCKData)(nil), "proto.FriendCKData")
	proto.RegisterType((*StealRecord)(nil), "proto.StealRecord")
	proto.RegisterType((*StealDailyData)(nil), "proto.StealDailyData")
	proto.RegisterType((*CKData)(nil), "proto.CKData")
	proto.RegisterType((*PlanetInfo)(nil), "proto.PlanetInfo")
	proto.RegisterType((*BuildingInfo)(nil), "proto.BuildingInfo")
}

func init() { proto.RegisterFile("struct.proto", fileDescriptor_0605f6bcb0ae6db1) }

var fileDescriptor_0605f6bcb0ae6db1 = []byte{
	// 2218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xbd, 0x6f, 0x24, 0x49,
	0x15, 0xbf, 0x76, 0x7b, 0xc6, 0xf6, 0x1b, 0xdb, 0xeb, 0xed, 0xdb, 0xdb, 0xeb, 0x5b, 0x4e, 0xc6,
	0x6a, 0x8e, 0x63, 0x05, 0xc7, 0x9e, 0x30, 0xc7, 0x49, 0x7c, 0x04, 0xd8, 0x9e, 0xf5, 0xee, 0xc8,
	0x33, 0xcb, 0xa8, 0xc6, 0xbb, 0xc4, 0xb5, 0xdd, 0xe5, 0x71, 0xc9, 0x3d, 0xd5, 0x43, 0x77, 0x8d,
	0x77, 0x86, 0x00, 0x02, 0x90, 0x90, 0xc8, 0xf8, 0x0f, 0x08, 0x88, 0xf8, 0x07, 0x08, 0x08, 0x20,
	0x41, 0x22, 0xbc, 0x84, 0x14, 0x81, 0x23, 0x24, 0x12, 0x44, 0x4a, 0x82, 0xde, 0xab, 0xaa, 0xfe,
	0x18, 0x7b, 0xf7, 0x76, 0x93, 0x8b, 0xa6, 0x7f, 0xbf, 0x7a, 0x53, 0xf5, 0xde, 0xab, 0xf7, 0xd5,
	0x0d, 0x9b, 0x85, 0xce, 0x67, 0xb1, 0x7e, 0x30, 0xcd, 0x33, 0x9d, 0x05, 0x2d, 0xfa, 0xb9, 0x07,
	0x42, 0xcd, 0x26, 0x86, 0x8a, 0xfe, 0xe0, 0xc1, 0xce, 0x51, 0x36, 0x99, 0x64, 0x8a, 0x89, 0x17,
	0x3c, 0x4f, 0x7a, 0x5a, 0x4c, 0x82, 0x00, 0x56, 0xf5, 0x62, 0x2a, 0x42, 0x6f, 0xcf, 0xbb, 0xbf,
	0xc1, 0xe8, 0x39, 0xd8, 0x01, 0x5f, 0xcd, 0x26, 0xe1, 0xca, 0x9e, 0x77, 0xdf, 0x67, 0xf8, 0x18,
	0xdc, 0x81, 0xd6, 0x94, 0xe7, 0x7c, 0x12, 0xfa, 0xc4, 0x19, 0x10, 0xdc, 0x85, 0xf6, 0x84, 0xcf,
	0x9f, 0xcc, 0x26, 0xe1, 0x2a, 0xd1, 0x16, 0xa1, 0xb4, 0x9c, 0xf0, 0xb1, 0x08, 0x5b, 0xb4, 0xa9,
	0x01, 0xc1, 0x77, 0xa1, 0x23, 0x95, 0x12, 0xb9, 0x39, 0x3c, 0x5c, 0xdf, 0xf3, 0xef, 0x77, 0xf6,
	0xdf, 0x35, 0xba, 0x3d, 0x58, 0xd6, 0x8b, 0xd5, 0x65, 0xa3, 0xbf, 0x7b, 0xd0, 0x19, 0x25, 0x17,
	0x4f, 0x0b, 0x91, 0xf7, 0xd4, 0x59, 0x86, 0x4a, 0x3f, 0xe1, 0x93, 0x52, 0x69, 0x7c, 0x0e, 0xbe,
	0x02, 0xfe, 0x48, 0xcc, 0x49, 0xe9, 0xed, 0xfd, 0xdb, 0x76, 0xdb, 0x47, 0x42, 0x25, 0x22, 0x3f,
	0x5d, 0x4c, 0x05, 0xc3, 0x55, 0xd4, 0xf8, 0xe0, 0x92, 0x6b, 0x9e, 0x93, 0x21, 0x1b, 0xcc, 0xa2,
	0x20, 0x84, 0xb5, 0xa3, 0x6c, 0xa6, 0x74, 0xbe, 0x20, 0x53, 0x36, 0x98, 0x83, 0xb8, 0x32, 0x92,
	0x5a, 0x3c, 0x95, 0x89, 0xb5, 0xc6, 0xc1, 0xe0, 0x7d, 0xd8, 0x38, 0x96, 0x79, 0xa1, 0x49, 0x93,
	0x36, 0xad, 0x55, 0x04, 0xfa, 0xe0, 0xe1, 0x84, 0xcb, 0x34, 0x5c, 0x33, 0x3e, 0x20, 0x80, 0xe7,
	0xff, 0x68, 0x2a, 0x54, 0xaf, 0x1b, 0xae, 0x9b, 0xf3, 0x0d, 0x8a, 0xfe, 0xe4, 0xc1, 0xd6, 0xc1,
	0x74, 0xfa, 0x74, 0x9a, 0x70, 0x2d, 0xc8, 0xc4, 0x0f, 0x60, 0x6b, 0x98, 0x67, 0x93, 0xa9, 0x7e,
	0x26, 0xf2, 0x42, 0x66, 0xca, 0xda, 0xda, 0x24, 0x8d, 0xde, 0x4a, 0x0b, 0xa5, 0xc9, 0x70, 0xd2,
	0x9b, 0x60, 0x70, 0x1f, 0x6e, 0x1d, 0x67, 0x79, 0x2c, 0x06, 0x52, 0xb9, 0x1d, 0x8c, 0xc9, 0xcb,
	0x74, 0x10, 0xc1, 0x26, 0x51, 0x4e, 0xcc, 0x38, 0xa0, 0xc1, 0x05, 0x7b, 0xd0, 0xe9, 0x66, 0x2f,
	0x54, 0x9a, 0xf1, 0xe4, 0x69, 0x9e, 0x5a, 0x4f, 0xd4, 0xa9, 0xe8, 0x87, 0x00, 0x23, 0x91, 0x5f,
	0xda, 0x0b, 0x0a, 0x61, 0xad, 0x57, 0x0c, 0xf9, 0xac, 0x30, 0x77, 0xb4, 0xce, 0x1c, 0x7c, 0xb9,
	0xc6, 0xd1, 0xaf, 0x3d, 0xd8, 0x64, 0xa2, 0xc8, 0x66, 0x79, 0x2c, 0xdc, 0x26, 0x47, 0x89, 0x7a,
	0x9c, 0x15, 0xda, 0x1a, 0xef, 0x20, 0xaa, 0xec, 0x24, 0x87, 0x5c, 0x9f, 0xdb, 0x9d, 0x1a, 0x1c,
	0x5e, 0xcf, 0x51, 0xa6, 0xce, 0xe4, 0x78, 0xd0, 0xfd, 0x8e, 0x35, 0xbd, 0x22, 0x82, 0x5d, 0x00,
	0x03, 0xe8, 0xff, 0xc6, 0xe4, 0x1a, 0x13, 0xfd, 0xca, 0x83, 0xb6, 0x09, 0xbe, 0xe0, 0x1b, 0xd0,
	0x1e, 0xe6, 0xd9, 0xb4, 0xd7, 0x25, 0x2d, 0xb6, 0xf7, 0xdf, 0xb6, 0xb1, 0x85, 0xa4, 0xc8, 0xf5,
	0x82, 0xa2, 0xcb, 0x8a, 0x60, 0x64, 0xf6, 0x54, 0x9c, 0xdb, 0xdc, 0xa1, 0x67, 0x0c, 0x85, 0xd3,
	0x4c, 0xf3, 0xd4, 0x25, 0x0f, 0x01, 0x0c, 0x85, 0x87, 0xf3, 0xa9, 0xcc, 0x85, 0x4b, 0x1e, 0x83,
	0x82, 0x6d, 0x58, 0xe9, 0x75, 0xc9, 0xc3, 0x2d, 0xb6, 0xd2, 0xeb, 0x46, 0xcf, 0xc9, 0x61, 0xc5,
	0x6c, 0x22, 0xde, 0x58, 0x93, 0xae, 0x28, 0x62, 0xa7, 0x09, 0x3e, 0xbf, 0xec, 0xcc, 0xe8, 0xcf,
	0xab, 0xd0, 0xc1, 0xe4, 0x1a, 0xe6, 0xd9, 0x99, 0x4c, 0xc5, 0x8d, 0xf9, 0x85, 0x9c, 0x8c, 0x2f,
	0xac, 0xaf, 0xe9, 0xd9, 0xe5, 0x9c, 0xff, 0x9a, 0x39, 0xb7, 0xda, 0xc8, 0xb9, 0x3d, 0xe8, 0x98,
	0xa7, 0xe3, 0x1c, 0xcf, 0x6a, 0x91, 0x46, 0x75, 0xca, 0x44, 0x11, 0xcb, 0x9e, 0x67, 0x9a, 0xf2,
	0x8b, 0xa2, 0x88, 0x20, 0xae, 0x3c, 0xeb, 0x0d, 0x4f, 0xe5, 0x44, 0x50, 0x7e, 0xf9, 0xcc, 0xc1,
	0xe0, 0x1e, 0xac, 0x1f, 0xf3, 0x89, 0x4c, 0x17, 0x36, 0xc7, 0x7c, 0x56, 0x62, 0xbc, 0x74, 0xf3,
	0x4c, 0xc6, 0x6d, 0x98, 0x4b, 0xaf, 0x98, 0x6a, 0xbd, 0x17, 0x67, 0x2a, 0x04, 0xfa, 0x77, 0x8d,
	0xa1, 0x80, 0x9c, 0xe5, 0xc7, 0x29, 0x1f, 0x87, 0x1d, 0x73, 0xaa, 0x85, 0x74, 0x6a, 0xca, 0xc7,
	0x7d, 0x59, 0xe8, 0x70, 0x73, 0xcf, 0xa7, 0x53, 0x2d, 0x26, 0x5d, 0x6d, 0x6a, 0x6d, 0x99, 0x30,
	0x76, 0x59, 0xb5, 0x0b, 0xd0, 0x15, 0x97, 0x32, 0x16, 0xe8, 0xac, 0x70, 0xdb, 0xe8, 0x53, 0x31,
	0x74, 0xde, 0x39, 0x57, 0x4a, 0xa4, 0xe1, 0x2d, 0x9b, 0x00, 0x06, 0xe2, 0x79, 0xc3, 0x94, 0xeb,
	0xb3, 0x2c, 0x9f, 0x84, 0x3b, 0xb4, 0x54, 0x62, 0x5c, 0xeb, 0x73, 0x35, 0x9e, 0x61, 0x01, 0xbe,
	0x6d, 0xd6, 0x1c, 0xae, 0xd7, 0xb9, 0xa0, 0x59, 0xe7, 0x76, 0x01, 0x1e, 0x67, 0x65, 0xb1, 0x79,
	0xdb, 0xe8, 0x52, 0x31, 0xb8, 0x3e, 0xcc, 0xb3, 0x62, 0x2a, 0x72, 0xa9, 0x17, 0xe1, 0x1d, 0xe3,
	0x9b, 0x8a, 0x89, 0xfe, 0xe8, 0xc1, 0x7b, 0x43, 0x39, 0x1e, 0x2f, 0x7e, 0x7c, 0x2e, 0x44, 0x7a,
	0xc4, 0xf3, 0xa4, 0x2f, 0x2e, 0x45, 0x6a, 0x52, 0x0a, 0x53, 0x60, 0x28, 0xb4, 0x0d, 0xdc, 0x16,
	0x33, 0x00, 0x23, 0x60, 0x28, 0x34, 0xc9, 0x0d, 0xa4, 0xa2, 0xc8, 0x6a, 0xb1, 0x3a, 0xd5, 0x90,
	0xe0, 0x26, 0xd0, 0xea, 0x12, 0x9c, 0xa2, 0x6b, 0x20, 0xd5, 0xa1, 0xd0, 0x14, 0x5d, 0x2d, 0x66,
	0x11, 0xf1, 0x7c, 0x8e, 0x7c, 0xcb, 0xf2, 0x84, 0x50, 0x93, 0x41, 0x96, 0x88, 0x22, 0x6c, 0xef,
	0xf9, 0xa8, 0x09, 0x81, 0xe8, 0x0c, 0xee, 0x35, 0x95, 0xef, 0x8a, 0x33, 0xa9, 0x84, 0xd5, 0x3e,
	0x80, 0x55, 0x14, 0xb3, 0xca, 0xd3, 0x33, 0xa6, 0xe9, 0x93, 0xcc, 0xaa, 0xbc, 0xf2, 0x84, 0xea,
	0xf5, 0xa3, 0x5c, 0x26, 0x8c, 0xab, 0x84, 0x5c, 0x1a, 0xfa, 0xb4, 0x7f, 0x93, 0x8c, 0x7e, 0xe9,
	0x41, 0xd8, 0x3c, 0xe8, 0x90, 0x17, 0xee, 0x98, 0x08, 0x36, 0x0f, 0x79, 0x21, 0x63, 0xa4, 0xb1,
	0xa9, 0x9a, 0xe3, 0x1a, 0x5c, 0xf0, 0x11, 0xdc, 0x2e, 0xf1, 0xb1, 0x4c, 0x53, 0xdc, 0x3e, 0x5c,
	0xa1, 0xa3, 0xae, 0x2f, 0xa0, 0x13, 0x7a, 0x05, 0xb6, 0x18, 0xeb, 0x39, 0x8b, 0xa2, 0xe7, 0x10,
	0x54, 0x5a, 0xa0, 0x24, 0x8d, 0x02, 0x9f, 0x02, 0x30, 0x51, 0xcc, 0x52, 0x7d, 0xea, 0x06, 0x82,
	0xed, 0xfd, 0xbb, 0x36, 0xa9, 0x49, 0xb2, 0x5a, 0x65, 0x35, 0x49, 0x74, 0xa9, 0x31, 0xd9, 0x94,
	0x1a, 0x03, 0xa2, 0xff, 0x7a, 0xf0, 0xa5, 0xe6, 0x21, 0xb6, 0xd0, 0x5b, 0x6b, 0xef, 0x42, 0x7b,
	0x98, 0x72, 0x25, 0x4c, 0x71, 0xf7, 0x99, 0x45, 0x58, 0xb7, 0x07, 0x7c, 0xfe, 0x50, 0x89, 0x7c,
	0xbc, 0xb0, 0x3b, 0x56, 0x04, 0xba, 0x99, 0x89, 0x38, 0xbb, 0x14, 0xb9, 0x95, 0x30, 0x35, 0xb5,
	0x49, 0x62, 0xf3, 0xb3, 0x44, 0x4f, 0x69, 0x91, 0x5f, 0xf2, 0xd4, 0x16, 0xbc, 0x65, 0xda, 0x9e,
	0x36, 0x3a, 0x97, 0x22, 0x4d, 0x6c, 0x09, 0xaa, 0x88, 0xe0, 0x63, 0x68, 0xa1, 0xe2, 0x26, 0x58,
	0x3a, 0xfb, 0xef, 0xb9, 0x7a, 0x7b, 0xcd, 0x77, 0xcc, 0xc8, 0x45, 0xbf, 0xf5, 0x61, 0x87, 0x56,
	0x47, 0x5a, 0x70, 0x17, 0xfc, 0x26, 0x59, 0x55, 0x2d, 0xfe, 0x4b, 0x4c, 0x25, 0x80, 0xcb, 0x74,
	0xd1, 0x97, 0x13, 0xe9, 0x1c, 0x58, 0x63, 0xc8, 0xb7, 0x27, 0x2e, 0xf4, 0xd1, 0xb7, 0x08, 0x28,
	0x8d, 0x4f, 0xba, 0x22, 0xd5, 0xdc, 0xda, 0xe5, 0xa0, 0x95, 0x97, 0xca, 0xda, 0x62, 0x00, 0xb2,
	0x23, 0x86, 0x6c, 0xdb, 0xb0, 0x04, 0x2c, 0xcb, 0xe7, 0xb6, 0x84, 0x1a, 0x80, 0xec, 0x21, 0xc9,
	0x9a, 0xea, 0x69, 0x80, 0x65, 0xf9, 0x9c, 0xaa, 0xa6, 0x61, 0xf9, 0x9c, 0x6e, 0x03, 0xeb, 0xf1,
	0x68, 0xca, 0x69, 0xa4, 0xa0, 0x9a, 0xd9, 0x62, 0x4d, 0x72, 0x49, 0x8a, 0xcf, 0xa9, 0x78, 0x36,
	0xa5, 0x8c, 0x4d, 0x23, 0x99, 0xd0, 0x2e, 0x9b, 0xc6, 0x26, 0x0b, 0xcb, 0x15, 0x3e, 0xa7, 0x02,
	0xea, 0x56, 0xf8, 0x3c, 0xd8, 0x87, 0x3b, 0x23, 0x9d, 0xa5, 0x42, 0x61, 0xe9, 0x2f, 0x86, 0x79,
	0xa6, 0x45, 0xac, 0x45, 0x42, 0xa5, 0xb4, 0xc5, 0x6e, 0x5c, 0x8b, 0xc6, 0x36, 0x03, 0xdd, 0x0d,
	0x15, 0x9a, 0x97, 0x31, 0xf9, 0x01, 0x6c, 0x1d, 0x9d, 0xf4, 0xb3, 0xf8, 0x42, 0x24, 0xe6, 0x42,
	0xcc, 0x75, 0x35, 0xc9, 0xe0, 0xab, 0xd0, 0x3e, 0x3a, 0xa1, 0x1c, 0xc1, 0xc4, 0xdb, 0xde, 0xdf,
	0x72, 0x33, 0xec, 0x89, 0x69, 0xc0, 0xe6, 0x37, 0x7a, 0x04, 0xb7, 0x0e, 0xe2, 0x98, 0x89, 0x4b,
	0x29, 0x5e, 0x54, 0x91, 0xd0, 0x2b, 0x0c, 0x63, 0xe7, 0xa2, 0x12, 0xd7, 0xdb, 0xc4, 0x4a, 0xa3,
	0x4d, 0x44, 0x63, 0xd8, 0x3e, 0x88, 0x63, 0x1a, 0x9f, 0xec, 0x3e, 0x2f, 0x1f, 0xaf, 0xbe, 0x0f,
	0xeb, 0x36, 0xcd, 0x0a, 0xd2, 0xae, 0xb3, 0xff, 0x65, 0xab, 0xdd, 0x41, 0x1c, 0xbb, 0x36, 0xd0,
	0x48, 0x44, 0x56, 0xfe, 0x21, 0x7a, 0x0c, 0xe1, 0xcb, 0xa4, 0xb0, 0x06, 0xe2, 0x82, 0x1b, 0x09,
	0xf0, 0xf9, 0x15, 0xb3, 0xdc, 0xbf, 0x3d, 0x08, 0x0e, 0xe2, 0xb8, 0x1c, 0x69, 0xab, 0x9c, 0x37,
	0xed, 0xcd, 0x6e, 0x63, 0x11, 0x66, 0x41, 0x6d, 0x4e, 0x35, 0x7b, 0xd5, 0x98, 0xeb, 0xc3, 0xb0,
	0x7f, 0xd3, 0x30, 0x5c, 0xb7, 0x7d, 0xf5, 0x0d, 0x6d, 0xaf, 0xf7, 0xda, 0x56, 0xb3, 0xd7, 0x2e,
	0xcd, 0xbe, 0xed, 0xeb, 0xb3, 0x6f, 0x1f, 0x76, 0x8e, 0x67, 0x2a, 0x1e, 0xbd, 0x90, 0x3a, 0x3e,
	0xff, 0x1c, 0x53, 0xf7, 0xa0, 0x73, 0x94, 0x25, 0xa2, 0x69, 0x6b, 0x9d, 0x8a, 0x7e, 0x06, 0xed,
	0xc7, 0x99, 0x3e, 0x96, 0x73, 0x0c, 0x17, 0x0c, 0x8e, 0x72, 0xfc, 0xf7, 0x59, 0x89, 0x71, 0x1f,
	0x9a, 0xd0, 0x8d, 0x7f, 0xdd, 0x3e, 0x35, 0x8a, 0x66, 0x12, 0x99, 0x0a, 0x9a, 0x75, 0x8c, 0xbf,
	0x4a, 0xec, 0xd6, 0x46, 0xf2, 0xa7, 0xc2, 0x4e, 0x65, 0x25, 0x8e, 0xfe, 0xe6, 0x51, 0xe0, 0x1a,
	0x1d, 0xaa, 0xc0, 0xfd, 0xe2, 0x35, 0xa9, 0xf9, 0xb0, 0xd5, 0xf0, 0x61, 0x7d, 0xfa, 0x69, 0x2f,
	0x4d, 0x3f, 0xb5, 0x34, 0x5a, 0x6b, 0xa6, 0xd1, 0x05, 0xec, 0x1c, 0x4a, 0x95, 0x98, 0xa9, 0xde,
	0xda, 0xf5, 0x00, 0x36, 0xfa, 0xd9, 0x58, 0xaa, 0x5a, 0xc7, 0xdb, 0xb1, 0x31, 0x53, 0xf2, 0xac,
	0x12, 0x09, 0xbe, 0x06, 0x6b, 0xe6, 0xff, 0x2e, 0xbb, 0x5c, 0xee, 0x1b, 0x96, 0xb9, 0xd5, 0xe8,
	0x10, 0xee, 0x50, 0x95, 0x19, 0x0a, 0x7d, 0x9a, 0x2d, 0x06, 0x7c, 0x7a, 0xd3, 0x20, 0xe4, 0xbb,
	0x41, 0x88, 0xde, 0x10, 0x70, 0x62, 0x5d, 0x71, 0x6f, 0x08, 0x8b, 0x5e, 0x37, 0x1a, 0xc1, 0xbb,
	0x6e, 0x0f, 0x6a, 0x36, 0x83, 0x4c, 0x89, 0xc5, 0xc3, 0xb9, 0xce, 0xa9, 0xcc, 0xd3, 0x04, 0xe4,
	0xb6, 0x21, 0x80, 0x03, 0x04, 0x2d, 0x0f, 0x45, 0x1e, 0x8b, 0xb2, 0x1f, 0x37, 0xb8, 0xe8, 0xf7,
	0x6e, 0x02, 0x69, 0xec, 0xfa, 0x4a, 0xed, 0xd0, 0xdd, 0x76, 0xe2, 0xb2, 0x5b, 0x96, 0x18, 0x2f,
	0x1f, 0x27, 0x18, 0x77, 0xa2, 0xe9, 0x46, 0x75, 0x2a, 0xf8, 0x1e, 0xac, 0x9f, 0x66, 0x46, 0xed,
	0xb0, 0x45, 0x3e, 0xdb, 0xad, 0xb7, 0xd1, 0xeb, 0xc6, 0xb1, 0x52, 0x3e, 0xfa, 0x10, 0xb6, 0x07,
	0xc5, 0xf8, 0x48, 0x60, 0xb7, 0xa6, 0x7a, 0x8d, 0x1a, 0x4e, 0x50, 0xd2, 0x66, 0x95, 0x01, 0x11,
	0x87, 0xdb, 0xa5, 0xdc, 0x50, 0xe8, 0x57, 0x88, 0xd2, 0x97, 0x0c, 0xa1, 0x7b, 0x89, 0x1d, 0xdd,
	0x0c, 0x40, 0x33, 0xa6, 0x42, 0x8f, 0x66, 0xcf, 0x49, 0x0d, 0x1b, 0xa4, 0x75, 0x2a, 0xfa, 0x9d,
	0xf3, 0xdb, 0x28, 0xcd, 0x34, 0x75, 0xae, 0x63, 0x7e, 0xe1, 0xea, 0xda, 0x3e, 0xdc, 0x31, 0x1d,
	0x9d, 0x26, 0xbd, 0x73, 0xae, 0xc6, 0xa2, 0x2f, 0xce, 0x4c, 0xfb, 0xd8, 0x62, 0x37, 0xae, 0x05,
	0x9f, 0xc0, 0x3b, 0xcb, 0x3c, 0x93, 0xe3, 0x73, 0x73, 0x6b, 0x5b, 0xec, 0xe6, 0x45, 0xac, 0x94,
	0x66, 0x36, 0x61, 0x98, 0x6b, 0x3e, 0x89, 0xd6, 0x98, 0xe8, 0xe7, 0x76, 0x0a, 0x2f, 0xb5, 0xa4,
	0x96, 0xf5, 0x39, 0x23, 0x57, 0xd9, 0xa0, 0xd1, 0x6f, 0xd8, 0x66, 0x57, 0xec, 0x50, 0x55, 0x27,
	0x97, 0xa4, 0xa4, 0x2a, 0x47, 0xaf, 0x3a, 0x19, 0xfd, 0xc6, 0x83, 0x5b, 0xa6, 0xef, 0xd2, 0x14,
	0xd3, 0xe5, 0x9a, 0x07, 0x9f, 0xc2, 0xa6, 0xa1, 0x70, 0xfa, 0xca, 0x93, 0xd0, 0xa3, 0x30, 0x08,
	0x6c, 0x18, 0xd0, 0x5f, 0xcd, 0x0a, 0x6b, 0xc8, 0x91, 0xb1, 0xb4, 0x2f, 0x5d, 0x8a, 0x1d, 0x8e,
	0x2a, 0x26, 0xf8, 0x10, 0xb6, 0xfb, 0xbc, 0xd0, 0x55, 0x9b, 0xb7, 0x2a, 0x2d, 0xb1, 0xd1, 0x0f,
	0x60, 0xd3, 0x75, 0x70, 0xd2, 0x67, 0x07, 0xfc, 0xa7, 0x36, 0xc8, 0x37, 0x18, 0x3e, 0xd2, 0x3b,
	0x53, 0x16, 0x5f, 0xd0, 0x1e, 0x36, 0xc4, 0x1d, 0x8e, 0xfe, 0xe2, 0xc1, 0xe6, 0x71, 0x2e, 0x85,
	0x4a, 0x8e, 0x4e, 0x5e, 0xf2, 0x77, 0x7a, 0xa9, 0xa8, 0x74, 0x34, 0x20, 0xf8, 0xd8, 0x6c, 0x8a,
	0xff, 0xa1, 0xb7, 0x81, 0x4e, 0xf9, 0xc2, 0x5e, 0xd7, 0x86, 0x95, 0x42, 0x38, 0x80, 0x3b, 0xd7,
	0xd9, 0xc9, 0xae, 0x53, 0x0e, 0xe0, 0x4b, 0x3e, 0x65, 0x35, 0x49, 0xbc, 0x19, 0xb4, 0xd8, 0x94,
	0x29, 0x59, 0xbe, 0x4b, 0x37, 0xc9, 0x68, 0x04, 0x9d, 0x9a, 0xab, 0x5f, 0xdb, 0x8a, 0xf7, 0x61,
	0x83, 0xfe, 0x56, 0xf3, 0x6f, 0x45, 0x44, 0x57, 0x1e, 0x6c, 0x13, 0xaa, 0x6e, 0xbb, 0x79, 0x6b,
	0xde, 0xb5, 0x5b, 0xfb, 0x3a, 0xec, 0x10, 0x1a, 0xa6, 0x7c, 0x21, 0x72, 0x9a, 0xce, 0xec, 0x89,
	0xd7, 0x78, 0x1c, 0xe4, 0x8d, 0xce, 0x18, 0x63, 0x46, 0xd4, 0xa8, 0xb0, 0x4c, 0x07, 0x9f, 0x34,
	0xac, 0xb3, 0xfd, 0xff, 0xa6, 0x10, 0x6b, 0x38, 0xc1, 0x7a, 0xae, 0x32, 0xb0, 0xe6, 0xb9, 0xca,
	0xc8, 0xff, 0x79, 0x38, 0xf1, 0xbd, 0xd1, 0xdd, 0x7f, 0x04, 0x6b, 0xf6, 0x63, 0x0a, 0x29, 0x5c,
	0xa9, 0x52, 0xfb, 0xcc, 0xc2, 0x9c, 0x08, 0xee, 0xd1, 0x2b, 0x9e, 0xc9, 0x29, 0xdd, 0xf9, 0x3a,
	0x33, 0xa0, 0xfe, 0xf9, 0xa3, 0xd5, 0xfc, 0xfc, 0x51, 0x0f, 0xd7, 0x76, 0x33, 0x5c, 0xe9, 0xbb,
	0xd7, 0x2c, 0xb7, 0x79, 0x6e, 0x26, 0xfb, 0x8a, 0x08, 0xbe, 0x05, 0x1b, 0x87, 0x33, 0x99, 0x26,
	0x52, 0x8d, 0x0b, 0xfb, 0x09, 0xd6, 0x05, 0xa5, 0xe3, 0x7b, 0xea, 0x2c, 0x63, 0x95, 0x54, 0xf4,
	0x13, 0x00, 0xfb, 0xba, 0xa2, 0xce, 0xb2, 0xe6, 0xf6, 0xde, 0xf2, 0xf6, 0x01, 0xac, 0x8e, 0x34,
	0x2f, 0x3f, 0x7f, 0xe1, 0x73, 0xf3, 0x48, 0xff, 0xb5, 0x8e, 0xfc, 0x85, 0x07, 0x9b, 0xf5, 0x35,
	0x7c, 0xdb, 0xee, 0x5f, 0xda, 0xe3, 0x56, 0xfa, 0x97, 0xc1, 0x37, 0xa1, 0x3d, 0xd2, 0x5c, 0xcf,
	0x0a, 0xfb, 0xbd, 0xf7, 0x9d, 0xa5, 0x0d, 0xcd, 0x22, 0xb3, 0x42, 0x58, 0x6b, 0x7b, 0xc5, 0x40,
	0x2a, 0x69, 0x2a, 0x65, 0xf5, 0xa2, 0xe0, 0x93, 0x5f, 0x6f, 0x5e, 0x3c, 0x0c, 0x3f, 0xfb, 0xe7,
	0xee, 0x5b, 0x7f, 0xbd, 0xda, 0xf5, 0x3e, 0xbb, 0xda, 0xf5, 0xfe, 0x71, 0xb5, 0xeb, 0xfd, 0xeb,
	0x6a, 0xf7, 0xad, 0xff, 0x5c, 0xed, 0x7a, 0xcf, 0xdb, 0x74, 0xda, 0xb7, 0xff, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0xde, 0xd9, 0x74, 0x96, 0x73, 0x17, 0x00, 0x00,
}

func (m *CommonRewardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRewardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonRewardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InnerReward) > 0 {
		for iNdEx := len(m.InnerReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InnerReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxNum != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.MaxNum))
		i--
		dAtA[i] = 0x20
	}
	if m.Param != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Param))
		i--
		dAtA[i] = 0x18
	}
	if m.Num != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SdkUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SdkUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SdkUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OpenID) > 0 {
		i -= len(m.OpenID)
		copy(dAtA[i:], m.OpenID)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.OpenID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SiteUid) > 0 {
		i -= len(m.SiteUid)
		copy(dAtA[i:], m.SiteUid)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.SiteUid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sex != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppUpdateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ForceVersion) > 0 {
		i -= len(m.ForceVersion)
		copy(dAtA[i:], m.ForceVersion)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.ForceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ForceMinVersion) > 0 {
		i -= len(m.ForceMinVersion)
		copy(dAtA[i:], m.ForceMinVersion)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.ForceMinVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PromptVersion) > 0 {
		i -= len(m.PromptVersion)
		copy(dAtA[i:], m.PromptVersion)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.PromptVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsPause {
		i--
		if m.IsPause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResourceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfigPath) > 0 {
		i -= len(m.ConfigPath)
		copy(dAtA[i:], m.ConfigPath)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.ConfigPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConfigMD5) > 0 {
		i -= len(m.ConfigMD5)
		copy(dAtA[i:], m.ConfigMD5)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.ConfigMD5)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourcePath) > 0 {
		i -= len(m.ResourcePath)
		copy(dAtA[i:], m.ResourcePath)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.ResourcePath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CdnHost) > 0 {
		i -= len(m.CdnHost)
		copy(dAtA[i:], m.CdnHost)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.CdnHost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x28
	}
	if m.Expire != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Incr != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Incr))
		i--
		dAtA[i] = 0x10
	}
	if m.PropID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Consume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Consume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expire != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x20
	}
	if m.Desc != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Desc))
		i--
		dAtA[i] = 0x10
	}
	if m.PropID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PropID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Prosperity != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Prosperity))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.HotVersion) > 0 {
		i -= len(m.HotVersion)
		copy(dAtA[i:], m.HotVersion)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.HotVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.FlagList) > 0 {
		dAtA2 := make([]byte, len(m.FlagList)*10)
		var j1 int
		for _, num1 := range m.FlagList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStruct(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x62
	}
	if m.CurFlag != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.CurFlag))
		i--
		dAtA[i] = 0x58
	}
	if m.FamilyIcon != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.FamilyIcon))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FamilyName) > 0 {
		i -= len(m.FamilyName)
		copy(dAtA[i:], m.FamilyName)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.FamilyName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FamilyID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.FamilyID))
		i--
		dAtA[i] = 0x40
	}
	if m.VIPTime != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.VIPTime))
		i--
		dAtA[i] = 0x38
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sex != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nick) > 0 {
		i -= len(m.Nick)
		copy(dAtA[i:], m.Nick)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Nick)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PiggyWheelCardLevelConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyWheelCardLevelConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyWheelCardLevelConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Modes) > 0 {
		dAtA4 := make([]byte, len(m.Modes)*10)
		var j3 int
		for _, num1 := range m.Modes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintStruct(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxBet != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.MaxBet))
		i--
		dAtA[i] = 0x28
	}
	if m.MinBet != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.MinBet))
		i--
		dAtA[i] = 0x20
	}
	if m.PetLevelMax != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PetLevelMax))
		i--
		dAtA[i] = 0x18
	}
	if m.PetLevelMin != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PetLevelMin))
		i--
		dAtA[i] = 0x10
	}
	if m.PetID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyWheelCardDefineConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyWheelCardDefineConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyWheelCardDefineConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GridRandCount) > 0 {
		dAtA6 := make([]byte, len(m.GridRandCount)*10)
		var j5 int
		for _, num1 := range m.GridRandCount {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintStruct(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.No != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.No))
		i--
		dAtA[i] = 0x10
	}
	if m.Mode != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyWheelCardBaseConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyWheelCardBaseConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyWheelCardBaseConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOpen != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.IsOpen))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BasicCardFillGrid) > 0 {
		dAtA8 := make([]byte, len(m.BasicCardFillGrid)*10)
		var j7 int
		for _, num1 := range m.BasicCardFillGrid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintStruct(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if m.BasicCardNum != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.BasicCardNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyWheelGridItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyWheelGridItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyWheelGridItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ResultType != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.ResultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyWheelGridContentConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyWheelGridContentConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyWheelGridContentConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Grids) > 0 {
		for iNdEx := len(m.Grids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MaxShield != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.MaxShield))
		i--
		dAtA[i] = 0x28
	}
	if m.RecoverInterval != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.RecoverInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.RecoverEnergy != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.RecoverEnergy))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxEnergy != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.MaxEnergy))
		i--
		dAtA[i] = 0x10
	}
	if m.Planet != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Planet))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyStealConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyStealConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyStealConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StolenTimesProtected != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.StolenTimesProtected))
		i--
		dAtA[i] = 0x70
	}
	if m.SideMax != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.SideMax))
		i--
		dAtA[i] = 0x68
	}
	if m.SideMin != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.SideMin))
		i--
		dAtA[i] = 0x60
	}
	if m.RobotSpaceMax != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.RobotSpaceMax))
		i--
		dAtA[i] = 0x58
	}
	if m.RobotSpaceMin != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.RobotSpaceMin))
		i--
		dAtA[i] = 0x50
	}
	if m.BRMax != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.BRMax))
		i--
		dAtA[i] = 0x48
	}
	if m.BRMin != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.BRMin))
		i--
		dAtA[i] = 0x40
	}
	if m.SRMax != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.SRMax))
		i--
		dAtA[i] = 0x38
	}
	if m.SRMin != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.SRMin))
		i--
		dAtA[i] = 0x30
	}
	if m.CKMin != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.CKMin))
		i--
		dAtA[i] = 0x28
	}
	if m.CKDelta != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.CKDelta))
		i--
		dAtA[i] = 0x20
	}
	if m.CKMax != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.CKMax))
		i--
		dAtA[i] = 0x18
	}
	if m.DailyLimit != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.DailyLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.PlanetID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PlanetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyStealConstantConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyStealConstantConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyStealConstantConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CKType) > 0 {
		dAtA10 := make([]byte, len(m.CKType)*10)
		var j9 int
		for _, num := range m.CKType {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintStruct(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if m.CKLockedLimit != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.CKLockedLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccReviewConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccReviewConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccReviewConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsReview {
		i--
		if m.IsReview {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccPauseConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccPauseConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccPauseConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contents) > 0 {
		for iNdEx := len(m.Contents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IsPause {
		i--
		if m.IsPause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccLanguageContentConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccLanguageContentConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccLanguageContentConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccAppUpdateConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccAppUpdateConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccAppUpdateConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Contents) > 0 {
		for iNdEx := len(m.Contents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PromptVersion) > 0 {
		i -= len(m.PromptVersion)
		copy(dAtA[i:], m.PromptVersion)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.PromptVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinVersion) > 0 {
		i -= len(m.MinVersion)
		copy(dAtA[i:], m.MinVersion)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.MinVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FuncSwitchConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FuncSwitchConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FuncSwitchConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CodeVersion) > 0 {
		i -= len(m.CodeVersion)
		copy(dAtA[i:], m.CodeVersion)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.CodeVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HotFix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotFix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HotFix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileSize) > 0 {
		i -= len(m.FileSize)
		copy(dAtA[i:], m.FileSize)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.FileSize)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForceUpdate) > 0 {
		i -= len(m.ForceUpdate)
		copy(dAtA[i:], m.ForceUpdate)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.ForceUpdate)))
		i--
		dAtA[i] = 0x12
	}
	if m.Revision != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccHotFixConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccHotFixConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccHotFixConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileSize) > 0 {
		i -= len(m.FileSize)
		copy(dAtA[i:], m.FileSize)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.FileSize)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForceUpdate) > 0 {
		i -= len(m.ForceUpdate)
		copy(dAtA[i:], m.ForceUpdate)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.ForceUpdate)))
		i--
		dAtA[i] = 0x12
	}
	if m.Revision != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BindRewardConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindRewardConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindRewardConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LoginType != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.LoginType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyPetToyMapConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyPetToyMapConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyPetToyMapConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToyID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.ToyID))
		i--
		dAtA[i] = 0x10
	}
	if m.PetID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyPetWheelMoneyExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyPetWheelMoneyExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyPetWheelMoneyExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtraPercent != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.ExtraPercent))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggyPetWheelMoneyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggyPetWheelMoneyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggyPetWheelMoneyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToyExtra) > 0 {
		for iNdEx := len(m.ToyExtra) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToyExtra[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BasePercent != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.BasePercent))
		i--
		dAtA[i] = 0x20
	}
	if m.PetLevel != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PetLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.PetID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCenterSteal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCenterSteal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCenterSteal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Money) > 0 {
		i -= len(m.Money)
		copy(dAtA[i:], m.Money)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Money)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCenterPetSteal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCenterPetSteal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCenterPetSteal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PetSubMoney) > 0 {
		i -= len(m.PetSubMoney)
		copy(dAtA[i:], m.PetSubMoney)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.PetSubMoney)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PetId != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PetId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Money) > 0 {
		i -= len(m.Money)
		copy(dAtA[i:], m.Money)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Money)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PiggySlotRobotFakeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggySlotRobotFakeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggySlotRobotFakeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShieldRate != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.ShieldRate))
		i--
		dAtA[i] = 0x18
	}
	if m.PlanetRandChangeRight != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PlanetRandChangeRight))
		i--
		dAtA[i] = 0x10
	}
	if m.PlanetRandChangeLeft != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.PlanetRandChangeLeft))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PiggySlotRobotLimitConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PiggySlotRobotLimitConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PiggySlotRobotLimitConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RobotStealMin != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.RobotStealMin))
		i--
		dAtA[i] = 0x18
	}
	if m.RobotStealMax != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.RobotStealMax))
		i--
		dAtA[i] = 0x10
	}
	if m.Planet != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Planet))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StolenDailyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StolenDailyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StolenDailyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastStolenTime != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.LastStolenTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StealMoney != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.StealMoney))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StolenRecord) > 0 {
		for iNdEx := len(m.StolenRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StolenRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CKLockedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CKLockedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CKLockedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LockTime != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.LockTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendCKData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendCKData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendCKData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastLoginTime != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.LastLoginTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StolenData != nil {
		{
			size, err := m.StolenData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStruct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.LockData) > 0 {
		for iNdEx := len(m.LockData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Money != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StealRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StealRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StealRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StealTime != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.StealTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Money != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StealDailyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StealDailyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StealDailyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastStealTime != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.LastStealTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StealRecord) > 0 {
		for iNdEx := len(m.StealRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StealRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StealRobotTimes != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.StealRobotTimes))
		i--
		dAtA[i] = 0x18
	}
	if m.StealPlayerTimes != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.StealPlayerTimes))
		i--
		dAtA[i] = 0x10
	}
	if m.StealMoney != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.StealMoney))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CKData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CKData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CKData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buildings) > 0 {
		for iNdEx := len(m.Buildings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buildings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CurPlanet != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.CurPlanet))
		i--
		dAtA[i] = 0x38
	}
	if m.LockTime != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.LockTime))
		i--
		dAtA[i] = 0x30
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsVip {
		i--
		if m.IsVip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStruct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Money != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlanetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlanetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buildings) > 0 {
		for iNdEx := len(m.Buildings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buildings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Star != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x10
	}
	if m.CurPlanet != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.CurPlanet))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsMiniShieldProtected {
		i--
		if m.IsMiniShieldProtected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Lv != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Lv))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonRewardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovStruct(uint64(m.Num))
	}
	if m.Param != 0 {
		n += 1 + sovStruct(uint64(m.Param))
	}
	if m.MaxNum != 0 {
		n += 1 + sovStruct(uint64(m.MaxNum))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if len(m.InnerReward) > 0 {
		for _, e := range m.InnerReward {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SdkUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovStruct(uint64(m.Sex))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.SiteUid)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.OpenID)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppUpdateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PromptVersion)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.ForceMinVersion)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.ForceVersion)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPause {
		n += 2
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CdnHost)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.ResourcePath)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.ConfigMD5)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.ConfigPath)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropID != 0 {
		n += 1 + sovStruct(uint64(m.PropID))
	}
	if m.Incr != 0 {
		n += 1 + sovStruct(uint64(m.Incr))
	}
	if m.Total != 0 {
		n += 1 + sovStruct(uint64(m.Total))
	}
	if m.Expire != 0 {
		n += 1 + sovStruct(uint64(m.Expire))
	}
	if m.ID != 0 {
		n += 1 + sovStruct(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Consume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropID != 0 {
		n += 1 + sovStruct(uint64(m.PropID))
	}
	if m.Desc != 0 {
		n += 1 + sovStruct(uint64(m.Desc))
	}
	if m.Expire != 0 {
		n += 1 + sovStruct(uint64(m.Expire))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Nick)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovStruct(uint64(m.Sex))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovStruct(uint64(m.AvatarFrame))
	}
	if m.IsRobot {
		n += 2
	}
	if m.VIPTime != 0 {
		n += 1 + sovStruct(uint64(m.VIPTime))
	}
	if m.FamilyID != 0 {
		n += 1 + sovStruct(uint64(m.FamilyID))
	}
	l = len(m.FamilyName)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.FamilyIcon != 0 {
		n += 1 + sovStruct(uint64(m.FamilyIcon))
	}
	if m.CurFlag != 0 {
		n += 1 + sovStruct(uint64(m.CurFlag))
	}
	if len(m.FlagList) > 0 {
		l = 0
		for _, e := range m.FlagList {
			l += sovStruct(uint64(e))
		}
		n += 1 + sovStruct(uint64(l)) + l
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 2 + l + sovStruct(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 2 + l + sovStruct(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 2 + l + sovStruct(uint64(l))
	}
	l = len(m.HotVersion)
	if l > 0 {
		n += 2 + l + sovStruct(uint64(l))
	}
	if m.Prosperity != 0 {
		n += 2 + sovStruct(uint64(m.Prosperity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyWheelCardLevelConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetID != 0 {
		n += 1 + sovStruct(uint64(m.PetID))
	}
	if m.PetLevelMin != 0 {
		n += 1 + sovStruct(uint64(m.PetLevelMin))
	}
	if m.PetLevelMax != 0 {
		n += 1 + sovStruct(uint64(m.PetLevelMax))
	}
	if m.MinBet != 0 {
		n += 1 + sovStruct(uint64(m.MinBet))
	}
	if m.MaxBet != 0 {
		n += 1 + sovStruct(uint64(m.MaxBet))
	}
	if len(m.Modes) > 0 {
		l = 0
		for _, e := range m.Modes {
			l += sovStruct(uint64(e))
		}
		n += 1 + sovStruct(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyWheelCardDefineConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovStruct(uint64(m.Mode))
	}
	if m.No != 0 {
		n += 1 + sovStruct(uint64(m.No))
	}
	if len(m.GridRandCount) > 0 {
		l = 0
		for _, e := range m.GridRandCount {
			l += sovStruct(uint64(e))
		}
		n += 1 + sovStruct(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyWheelCardBaseConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicCardNum != 0 {
		n += 1 + sovStruct(uint64(m.BasicCardNum))
	}
	if len(m.BasicCardFillGrid) > 0 {
		l = 0
		for _, e := range m.BasicCardFillGrid {
			l += sovStruct(uint64(e))
		}
		n += 1 + sovStruct(uint64(l)) + l
	}
	if m.IsOpen != 0 {
		n += 1 + sovStruct(uint64(m.IsOpen))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyWheelGridItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultType != 0 {
		n += 1 + sovStruct(uint64(m.ResultType))
	}
	if m.Count != 0 {
		n += 1 + sovStruct(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyWheelGridContentConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != 0 {
		n += 1 + sovStruct(uint64(m.Planet))
	}
	if m.MaxEnergy != 0 {
		n += 1 + sovStruct(uint64(m.MaxEnergy))
	}
	if m.RecoverEnergy != 0 {
		n += 1 + sovStruct(uint64(m.RecoverEnergy))
	}
	if m.RecoverInterval != 0 {
		n += 1 + sovStruct(uint64(m.RecoverInterval))
	}
	if m.MaxShield != 0 {
		n += 1 + sovStruct(uint64(m.MaxShield))
	}
	if len(m.Grids) > 0 {
		for _, e := range m.Grids {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyStealConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetID != 0 {
		n += 1 + sovStruct(uint64(m.PlanetID))
	}
	if m.DailyLimit != 0 {
		n += 1 + sovStruct(uint64(m.DailyLimit))
	}
	if m.CKMax != 0 {
		n += 1 + sovStruct(uint64(m.CKMax))
	}
	if m.CKDelta != 0 {
		n += 1 + sovStruct(uint64(m.CKDelta))
	}
	if m.CKMin != 0 {
		n += 1 + sovStruct(uint64(m.CKMin))
	}
	if m.SRMin != 0 {
		n += 1 + sovStruct(uint64(m.SRMin))
	}
	if m.SRMax != 0 {
		n += 1 + sovStruct(uint64(m.SRMax))
	}
	if m.BRMin != 0 {
		n += 1 + sovStruct(uint64(m.BRMin))
	}
	if m.BRMax != 0 {
		n += 1 + sovStruct(uint64(m.BRMax))
	}
	if m.RobotSpaceMin != 0 {
		n += 1 + sovStruct(uint64(m.RobotSpaceMin))
	}
	if m.RobotSpaceMax != 0 {
		n += 1 + sovStruct(uint64(m.RobotSpaceMax))
	}
	if m.SideMin != 0 {
		n += 1 + sovStruct(uint64(m.SideMin))
	}
	if m.SideMax != 0 {
		n += 1 + sovStruct(uint64(m.SideMax))
	}
	if m.StolenTimesProtected != 0 {
		n += 1 + sovStruct(uint64(m.StolenTimesProtected))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyStealConstantConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CKLockedLimit != 0 {
		n += 1 + sovStruct(uint64(m.CKLockedLimit))
	}
	if len(m.CKType) > 0 {
		l = 0
		for _, e := range m.CKType {
			l += sovStruct(uint64(e))
		}
		n += 1 + sovStruct(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccReviewConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReview {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccPauseConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPause {
		n += 2
	}
	if len(m.Contents) > 0 {
		for _, e := range m.Contents {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccLanguageContentConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccAppUpdateConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.MinVersion)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.PromptVersion)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if len(m.Contents) > 0 {
		for _, e := range m.Contents {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FuncSwitchConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.CodeVersion)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotFix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revision != 0 {
		n += 1 + sovStruct(uint64(m.Revision))
	}
	l = len(m.ForceUpdate)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.FileSize)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccHotFixConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revision != 0 {
		n += 1 + sovStruct(uint64(m.Revision))
	}
	l = len(m.ForceUpdate)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.FileSize)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindRewardConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginType != 0 {
		n += 1 + sovStruct(uint64(m.LoginType))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyPetToyMapConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetID != 0 {
		n += 1 + sovStruct(uint64(m.PetID))
	}
	if m.ToyID != 0 {
		n += 1 + sovStruct(uint64(m.ToyID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyPetWheelMoneyExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovStruct(uint64(m.Level))
	}
	if m.ExtraPercent != 0 {
		n += 1 + sovStruct(uint64(m.ExtraPercent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggyPetWheelMoneyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetID != 0 {
		n += 1 + sovStruct(uint64(m.PetID))
	}
	if m.PetLevel != 0 {
		n += 1 + sovStruct(uint64(m.PetLevel))
	}
	if m.BasePercent != 0 {
		n += 1 + sovStruct(uint64(m.BasePercent))
	}
	if len(m.ToyExtra) > 0 {
		for _, e := range m.ToyExtra {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgCenterSteal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Money)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgCenterPetSteal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Money)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.PetId != 0 {
		n += 1 + sovStruct(uint64(m.PetId))
	}
	l = len(m.PetSubMoney)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggySlotRobotFakeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetRandChangeLeft != 0 {
		n += 1 + sovStruct(uint64(m.PlanetRandChangeLeft))
	}
	if m.PlanetRandChangeRight != 0 {
		n += 1 + sovStruct(uint64(m.PlanetRandChangeRight))
	}
	if m.ShieldRate != 0 {
		n += 1 + sovStruct(uint64(m.ShieldRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PiggySlotRobotLimitConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != 0 {
		n += 1 + sovStruct(uint64(m.Planet))
	}
	if m.RobotStealMax != 0 {
		n += 1 + sovStruct(uint64(m.RobotStealMax))
	}
	if m.RobotStealMin != 0 {
		n += 1 + sovStruct(uint64(m.RobotStealMin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StolenDailyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StolenRecord) > 0 {
		for _, e := range m.StolenRecord {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.StealMoney != 0 {
		n += 1 + sovStruct(uint64(m.StealMoney))
	}
	if m.LastStolenTime != 0 {
		n += 1 + sovStruct(uint64(m.LastStolenTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CKLockedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.LockTime != 0 {
		n += 1 + sovStruct(uint64(m.LockTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendCKData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Money != 0 {
		n += 1 + sovStruct(uint64(m.Money))
	}
	if len(m.LockData) > 0 {
		for _, e := range m.LockData {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.StolenData != nil {
		l = m.StolenData.Size()
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.LastLoginTime != 0 {
		n += 1 + sovStruct(uint64(m.LastLoginTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StealRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Money != 0 {
		n += 1 + sovStruct(uint64(m.Money))
	}
	if m.StealTime != 0 {
		n += 1 + sovStruct(uint64(m.StealTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StealDailyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StealMoney != 0 {
		n += 1 + sovStruct(uint64(m.StealMoney))
	}
	if m.StealPlayerTimes != 0 {
		n += 1 + sovStruct(uint64(m.StealPlayerTimes))
	}
	if m.StealRobotTimes != 0 {
		n += 1 + sovStruct(uint64(m.StealRobotTimes))
	}
	if len(m.StealRecord) > 0 {
		for _, e := range m.StealRecord {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.LastStealTime != 0 {
		n += 1 + sovStruct(uint64(m.LastStealTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CKData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Money != 0 {
		n += 1 + sovStruct(uint64(m.Money))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.IsVip {
		n += 2
	}
	if m.IsRobot {
		n += 2
	}
	if m.LockTime != 0 {
		n += 1 + sovStruct(uint64(m.LockTime))
	}
	if m.CurPlanet != 0 {
		n += 1 + sovStruct(uint64(m.CurPlanet))
	}
	if len(m.Buildings) > 0 {
		for _, e := range m.Buildings {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlanetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurPlanet != 0 {
		n += 1 + sovStruct(uint64(m.CurPlanet))
	}
	if m.Star != 0 {
		n += 1 + sovStruct(uint64(m.Star))
	}
	if len(m.Buildings) > 0 {
		for _, e := range m.Buildings {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lv != 0 {
		n += 1 + sovStruct(uint64(m.Lv))
	}
	if m.Status != 0 {
		n += 1 + sovStruct(uint64(m.Status))
	}
	if m.IsMiniShieldProtected {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStruct(x uint64) (n int) {
	return sovStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonRewardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRewardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRewardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			m.Param = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNum", wireType)
			}
			m.MaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerReward = append(m.InnerReward, &CommonRewardItem{})
			if err := m.InnerReward[len(m.InnerReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SdkUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SdkUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SdkUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= GenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceMinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForceMinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPause = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdnHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMD5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMD5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= PropertyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incr", wireType)
			}
			m.Incr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Incr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Consume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropID", wireType)
			}
			m.PropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropID |= PropertyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			m.Desc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Desc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= GenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VIPTime", wireType)
			}
			m.VIPTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VIPTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyID", wireType)
			}
			m.FamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FamilyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyIcon", wireType)
			}
			m.FamilyIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyIcon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurFlag", wireType)
			}
			m.CurFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurFlag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FlagList = append(m.FlagList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FlagList) == 0 {
					m.FlagList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FlagList = append(m.FlagList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagList", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyWheelCardLevelConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyWheelCardLevelConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyWheelCardLevelConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetID", wireType)
			}
			m.PetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetLevelMin", wireType)
			}
			m.PetLevelMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetLevelMin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetLevelMax", wireType)
			}
			m.PetLevelMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetLevelMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBet", wireType)
			}
			m.MinBet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBet", wireType)
			}
			m.MaxBet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Modes = append(m.Modes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Modes) == 0 {
					m.Modes = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Modes = append(m.Modes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Modes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyWheelCardDefineConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyWheelCardDefineConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyWheelCardDefineConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			m.No = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.No |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GridRandCount = append(m.GridRandCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GridRandCount) == 0 {
					m.GridRandCount = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GridRandCount = append(m.GridRandCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GridRandCount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyWheelCardBaseConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyWheelCardBaseConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyWheelCardBaseConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicCardNum", wireType)
			}
			m.BasicCardNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BasicCardNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BasicCardFillGrid = append(m.BasicCardFillGrid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BasicCardFillGrid) == 0 {
					m.BasicCardFillGrid = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BasicCardFillGrid = append(m.BasicCardFillGrid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicCardFillGrid", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			m.IsOpen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsOpen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyWheelGridItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyWheelGridItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyWheelGridItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultType", wireType)
			}
			m.ResultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultType |= WheelResultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyWheelGridContentConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyWheelGridContentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyWheelGridContentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			m.Planet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Planet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEnergy", wireType)
			}
			m.MaxEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEnergy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverEnergy", wireType)
			}
			m.RecoverEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverEnergy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverInterval", wireType)
			}
			m.RecoverInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxShield", wireType)
			}
			m.MaxShield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxShield |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grids = append(m.Grids, &PiggyWheelGridItem{})
			if err := m.Grids[len(m.Grids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyStealConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyStealConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyStealConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetID", wireType)
			}
			m.PlanetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyLimit", wireType)
			}
			m.DailyLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CKMax", wireType)
			}
			m.CKMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CKMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CKDelta", wireType)
			}
			m.CKDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CKDelta |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CKMin", wireType)
			}
			m.CKMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CKMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SRMin", wireType)
			}
			m.SRMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SRMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SRMax", wireType)
			}
			m.SRMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SRMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BRMin", wireType)
			}
			m.BRMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BRMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BRMax", wireType)
			}
			m.BRMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BRMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotSpaceMin", wireType)
			}
			m.RobotSpaceMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotSpaceMin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotSpaceMax", wireType)
			}
			m.RobotSpaceMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotSpaceMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideMin", wireType)
			}
			m.SideMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SideMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideMax", wireType)
			}
			m.SideMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SideMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StolenTimesProtected", wireType)
			}
			m.StolenTimesProtected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StolenTimesProtected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyStealConstantConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyStealConstantConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyStealConstantConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CKLockedLimit", wireType)
			}
			m.CKLockedLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CKLockedLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v CKType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CKType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CKType = append(m.CKType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CKType) == 0 {
					m.CKType = make([]CKType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CKType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CKType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CKType = append(m.CKType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CKType", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccReviewConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccReviewConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccReviewConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReview", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReview = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccPauseConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccPauseConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccPauseConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPause = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents, &AccLanguageContentConfig{})
			if err := m.Contents[len(m.Contents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccLanguageContentConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccLanguageContentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccLanguageContentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccAppUpdateConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccAppUpdateConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccAppUpdateConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents, &AccLanguageContentConfig{})
			if err := m.Contents[len(m.Contents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FuncSwitchConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuncSwitchConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuncSwitchConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotFix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotFix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotFix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceUpdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForceUpdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccHotFixConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccHotFixConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccHotFixConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceUpdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForceUpdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindRewardConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindRewardConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindRewardConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= LoginType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &Reward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyPetToyMapConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyPetToyMapConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyPetToyMapConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetID", wireType)
			}
			m.PetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToyID", wireType)
			}
			m.ToyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToyID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyPetWheelMoneyExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyPetWheelMoneyExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyPetWheelMoneyExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraPercent", wireType)
			}
			m.ExtraPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggyPetWheelMoneyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggyPetWheelMoneyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggyPetWheelMoneyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetID", wireType)
			}
			m.PetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetLevel", wireType)
			}
			m.PetLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePercent", wireType)
			}
			m.BasePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BasePercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToyExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToyExtra = append(m.ToyExtra, &PiggyPetWheelMoneyExtra{})
			if err := m.ToyExtra[len(m.ToyExtra)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCenterSteal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCenterSteal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCenterSteal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Money = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCenterPetSteal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCenterPetSteal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCenterPetSteal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Money = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			m.PetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetSubMoney", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PetSubMoney = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggySlotRobotFakeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggySlotRobotFakeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggySlotRobotFakeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetRandChangeLeft", wireType)
			}
			m.PlanetRandChangeLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetRandChangeLeft |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetRandChangeRight", wireType)
			}
			m.PlanetRandChangeRight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetRandChangeRight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldRate", wireType)
			}
			m.ShieldRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShieldRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PiggySlotRobotLimitConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PiggySlotRobotLimitConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PiggySlotRobotLimitConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			m.Planet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Planet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotStealMax", wireType)
			}
			m.RobotStealMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotStealMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotStealMin", wireType)
			}
			m.RobotStealMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotStealMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StolenDailyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StolenDailyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StolenDailyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StolenRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StolenRecord = append(m.StolenRecord, &StealRecord{})
			if err := m.StolenRecord[len(m.StolenRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StealMoney", wireType)
			}
			m.StealMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StealMoney |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStolenTime", wireType)
			}
			m.LastStolenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStolenTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CKLockedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CKLockedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CKLockedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendCKData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendCKData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendCKData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockData = append(m.LockData, &CKLockedData{})
			if err := m.LockData[len(m.LockData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StolenData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StolenData == nil {
				m.StolenData = &StolenDailyData{}
			}
			if err := m.StolenData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTime", wireType)
			}
			m.LastLoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLoginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StealRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StealRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StealRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StealTime", wireType)
			}
			m.StealTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StealTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StealDailyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StealDailyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StealDailyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StealMoney", wireType)
			}
			m.StealMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StealMoney |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StealPlayerTimes", wireType)
			}
			m.StealPlayerTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StealPlayerTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StealRobotTimes", wireType)
			}
			m.StealRobotTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StealRobotTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StealRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StealRecord = append(m.StealRecord, &StealRecord{})
			if err := m.StealRecord[len(m.StealRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStealTime", wireType)
			}
			m.LastStealTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStealTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CKData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CKData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CKData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &UserProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVip = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPlanet", wireType)
			}
			m.CurPlanet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurPlanet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buildings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buildings = append(m.Buildings, &BuildingInfo{})
			if err := m.Buildings[len(m.Buildings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPlanet", wireType)
			}
			m.CurPlanet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurPlanet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buildings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buildings = append(m.Buildings, &BuildingInfo{})
			if err := m.Buildings[len(m.Buildings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BuildingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMiniShieldProtected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMiniShieldProtected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStruct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStruct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStruct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStruct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStruct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStruct = fmt.Errorf("proto: unexpected end of group")
)
