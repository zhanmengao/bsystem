// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enum.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenderType int32

const (
	GenderTypeInit   GenderType = 0
	GenderTypeMale   GenderType = 1
	GenderTypeFemale GenderType = 2
)

var GenderType_name = map[int32]string{
	0: "GenderTypeInit",
	1: "GenderTypeMale",
	2: "GenderTypeFemale",
}

var GenderType_value = map[string]int32{
	"GenderTypeInit":   0,
	"GenderTypeMale":   1,
	"GenderTypeFemale": 2,
}

func (GenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{0}
}

type CKType int32

const (
	CKTypeInit   CKType = 0
	CKTypeRobot  CKType = 1
	CKTypeFriend CKType = 2
)

var CKType_name = map[int32]string{
	0: "CKTypeInit",
	1: "CKTypeRobot",
	2: "CKTypeFriend",
}

var CKType_value = map[string]int32{
	"CKTypeInit":   0,
	"CKTypeRobot":  1,
	"CKTypeFriend": 2,
}

func (CKType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{1}
}

type LoginType int32

const (
	LoginTypeGuest    LoginType = 0
	LoginTypeFacebook LoginType = 1
	LoginTypeQQ       LoginType = 2
	LoginTypeWX       LoginType = 3
	LoginTypeAli      LoginType = 4
	LoginTypeApple    LoginType = 5
	LoginTypeQQH5     LoginType = 6
	LoginTypeWXH5     LoginType = 7
	LoginTypeQZONE    LoginType = 8
	LoginTypeWXApp    LoginType = 9
	LoginTypeWechat   LoginType = 11
)

var LoginType_name = map[int32]string{
	0:  "LoginTypeGuest",
	1:  "LoginTypeFacebook",
	2:  "LoginTypeQQ",
	3:  "LoginTypeWX",
	4:  "LoginTypeAli",
	5:  "LoginTypeApple",
	6:  "LoginTypeQQH5",
	7:  "LoginTypeWXH5",
	8:  "LoginTypeQZONE",
	9:  "LoginTypeWXApp",
	11: "LoginTypeWechat",
}

var LoginType_value = map[string]int32{
	"LoginTypeGuest":    0,
	"LoginTypeFacebook": 1,
	"LoginTypeQQ":       2,
	"LoginTypeWX":       3,
	"LoginTypeAli":      4,
	"LoginTypeApple":    5,
	"LoginTypeQQH5":     6,
	"LoginTypeWXH5":     7,
	"LoginTypeQZONE":    8,
	"LoginTypeWXApp":    9,
	"LoginTypeWechat":   11,
}

func (LoginType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{2}
}

type UserStatus int32

const (
	UserStatusNormal  UserStatus = 0
	UserStatusBlocked UserStatus = 1
	UserStatusDeleted UserStatus = 2
	UserStatusShutUp  UserStatus = 3
)

var UserStatus_name = map[int32]string{
	0: "UserStatusNormal",
	1: "UserStatusBlocked",
	2: "UserStatusDeleted",
	3: "UserStatusShutUp",
}

var UserStatus_value = map[string]int32{
	"UserStatusNormal":  0,
	"UserStatusBlocked": 1,
	"UserStatusDeleted": 2,
	"UserStatusShutUp":  3,
}

func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{3}
}

type PetStatus int32

const (
	PetStatusUnhatched PetStatus = 0
	PetStatusEnergetic PetStatus = 1
	PetStatusExhausted PetStatus = 2
)

var PetStatus_name = map[int32]string{
	0: "PetStatusUnhatched",
	1: "PetStatusEnergetic",
	2: "PetStatusExhausted",
}

var PetStatus_value = map[string]int32{
	"PetStatusUnhatched": 0,
	"PetStatusEnergetic": 1,
	"PetStatusExhausted": 2,
}

func (PetStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{4}
}

type BuildingStatus int32

const (
	BuildingStatusNormal  BuildingStatus = 0
	BuildingStatusDamage  BuildingStatus = 1
	BuildingStatusDestroy BuildingStatus = 2
)

var BuildingStatus_name = map[int32]string{
	0: "BuildingStatusNormal",
	1: "BuildingStatusDamage",
	2: "BuildingStatusDestroy",
}

var BuildingStatus_value = map[string]int32{
	"BuildingStatusNormal":  0,
	"BuildingStatusDamage":  1,
	"BuildingStatusDestroy": 2,
}

func (BuildingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{5}
}

type EnemyListType int32

const (
	EnemyListTypeInit   EnemyListType = 0
	EnemyListTypeTotal  EnemyListType = 1
	EnemyListTypeWeek   EnemyListType = 2
	EnemyListTypeRecent EnemyListType = 3
)

var EnemyListType_name = map[int32]string{
	0: "EnemyListTypeInit",
	1: "EnemyListTypeTotal",
	2: "EnemyListTypeWeek",
	3: "EnemyListTypeRecent",
}

var EnemyListType_value = map[string]int32{
	"EnemyListTypeInit":   0,
	"EnemyListTypeTotal":  1,
	"EnemyListTypeWeek":   2,
	"EnemyListTypeRecent": 3,
}

func (EnemyListType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{6}
}

type AttackFriendType int32

const (
	AttackFriendTypeInit   AttackFriendType = 0
	AttackFriendTypeOnline AttackFriendType = 1
	AttackFriendTypeEnemy  AttackFriendType = 2
	AttackFriendTypeRecent AttackFriendType = 3
)

var AttackFriendType_name = map[int32]string{
	0: "AttackFriendTypeInit",
	1: "AttackFriendTypeOnline",
	2: "AttackFriendTypeEnemy",
	3: "AttackFriendTypeRecent",
}

var AttackFriendType_value = map[string]int32{
	"AttackFriendTypeInit":   0,
	"AttackFriendTypeOnline": 1,
	"AttackFriendTypeEnemy":  2,
	"AttackFriendTypeRecent": 3,
}

func (AttackFriendType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{7}
}

type AttackRecordType int32

const (
	AttackRecordTypeInit    AttackRecordType = 0
	AttackRecordTypeDefense AttackRecordType = 10
	AttackRecordTypeDamage  AttackRecordType = 11
	AttackRecordTypeDestroy AttackRecordType = 12
	AttackRecordTypeSteal   AttackRecordType = 20
)

var AttackRecordType_name = map[int32]string{
	0:  "AttackRecordTypeInit",
	10: "AttackRecordTypeDefense",
	11: "AttackRecordTypeDamage",
	12: "AttackRecordTypeDestroy",
	20: "AttackRecordTypeSteal",
}

var AttackRecordType_value = map[string]int32{
	"AttackRecordTypeInit":    0,
	"AttackRecordTypeDefense": 10,
	"AttackRecordTypeDamage":  11,
	"AttackRecordTypeDestroy": 12,
	"AttackRecordTypeSteal":   20,
}

func (AttackRecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{8}
}

type WantedType int32

const (
	WantedTypeInit   WantedType = 0
	WantedTypeNormal WantedType = 1
	WantedTypeBig    WantedType = 2
)

var WantedType_name = map[int32]string{
	0: "WantedTypeInit",
	1: "WantedTypeNormal",
	2: "WantedTypeBig",
}

var WantedType_value = map[string]int32{
	"WantedTypeInit":   0,
	"WantedTypeNormal": 1,
	"WantedTypeBig":    2,
}

func (WantedType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{9}
}

type OnlineStatus int32

const (
	OnlineStatusInit    OnlineStatus = 0
	OnlineStatusOffline OnlineStatus = 1
	OnlineStatusOnline  OnlineStatus = 2
)

var OnlineStatus_name = map[int32]string{
	0: "OnlineStatusInit",
	1: "OnlineStatusOffline",
	2: "OnlineStatusOnline",
}

var OnlineStatus_value = map[string]int32{
	"OnlineStatusInit":    0,
	"OnlineStatusOffline": 1,
	"OnlineStatusOnline":  2,
}

func (OnlineStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{10}
}

type UserMsgType int32

const (
	UserMsgTypeInit     UserMsgType = 0
	UserMsgTypeAll      UserMsgType = 1
	UserMsgTypeSend     UserMsgType = 2
	UserMsgTypeExchange UserMsgType = 3
)

var UserMsgType_name = map[int32]string{
	0: "UserMsgTypeInit",
	1: "UserMsgTypeAll",
	2: "UserMsgTypeSend",
	3: "UserMsgTypeExchange",
}

var UserMsgType_value = map[string]int32{
	"UserMsgTypeInit":     0,
	"UserMsgTypeAll":      1,
	"UserMsgTypeSend":     2,
	"UserMsgTypeExchange": 3,
}

func (UserMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{11}
}

type UserMsgMod int32

const (
	UserMsgModInit          UserMsgMod = 0
	UserMsgModFruit         UserMsgMod = 1
	UserMsgModDungeonAssist UserMsgMod = 2
	UserMsgModDungeonReward UserMsgMod = 3
)

var UserMsgMod_name = map[int32]string{
	0: "UserMsgModInit",
	1: "UserMsgModFruit",
	2: "UserMsgModDungeonAssist",
	3: "UserMsgModDungeonReward",
}

var UserMsgMod_value = map[string]int32{
	"UserMsgModInit":          0,
	"UserMsgModFruit":         1,
	"UserMsgModDungeonAssist": 2,
	"UserMsgModDungeonReward": 3,
}

func (UserMsgMod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{12}
}

// 兼容php消息的消息类型
type UserMsgTypePhp int32

const (
	UserMsgTypePhpInit          UserMsgTypePhp = 0
	UserMsgTypePhpDungeonAssist UserMsgTypePhp = 10000
	UserMsgTypePhpDungeonReward UserMsgTypePhp = 10001
)

var UserMsgTypePhp_name = map[int32]string{
	0:     "UserMsgTypePhpInit",
	10000: "UserMsgTypePhpDungeonAssist",
	10001: "UserMsgTypePhpDungeonReward",
}

var UserMsgTypePhp_value = map[string]int32{
	"UserMsgTypePhpInit":          0,
	"UserMsgTypePhpDungeonAssist": 10000,
	"UserMsgTypePhpDungeonReward": 10001,
}

func (UserMsgTypePhp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{13}
}

type GuardCardSendType int32

const (
	GuardCardSendTypeInit    GuardCardSendType = 0
	GuardCardSendTypeSend    GuardCardSendType = 1
	GuardCardSendTypeReceive GuardCardSendType = 2
)

var GuardCardSendType_name = map[int32]string{
	0: "GuardCardSendTypeInit",
	1: "GuardCardSendTypeSend",
	2: "GuardCardSendTypeReceive",
}

var GuardCardSendType_value = map[string]int32{
	"GuardCardSendTypeInit":    0,
	"GuardCardSendTypeSend":    1,
	"GuardCardSendTypeReceive": 2,
}

func (GuardCardSendType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{14}
}

type UserMsgStatus int32

const (
	UserMsgStatusInit    UserMsgStatus = 0
	UserMsgStatusAgree   UserMsgStatus = 1
	UserMsgStatusRefuse  UserMsgStatus = 2
	UserMsgStatusRunning UserMsgStatus = 3
	UserMsgStatusSuccess UserMsgStatus = 4
	UserMsgStatusFailed  UserMsgStatus = 5
	UserMsgStatusReward  UserMsgStatus = 6
)

var UserMsgStatus_name = map[int32]string{
	0: "UserMsgStatusInit",
	1: "UserMsgStatusAgree",
	2: "UserMsgStatusRefuse",
	3: "UserMsgStatusRunning",
	4: "UserMsgStatusSuccess",
	5: "UserMsgStatusFailed",
	6: "UserMsgStatusReward",
}

var UserMsgStatus_value = map[string]int32{
	"UserMsgStatusInit":    0,
	"UserMsgStatusAgree":   1,
	"UserMsgStatusRefuse":  2,
	"UserMsgStatusRunning": 3,
	"UserMsgStatusSuccess": 4,
	"UserMsgStatusFailed":  5,
	"UserMsgStatusReward":  6,
}

func (UserMsgStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{15}
}

type MsgType int32

const (
	MsgTypeInit                MsgType = 0
	MsgTypeWanted              MsgType = 1
	MsgTypeAttackDefense       MsgType = 2
	MsgTypeAttackDamage        MsgType = 3
	MsgTypeAttackDestroy       MsgType = 4
	MsgTypeSteal               MsgType = 5
	MsgTypeSelf                MsgType = 6
	MsgTypeBeWanted            MsgType = 7
	MsgTypeHelpWanted          MsgType = 8
	MsgTypeUseWanted           MsgType = 9
	MsgTypeInvite              MsgType = 101
	MsgTypeSystem              MsgType = 102
	MsgTypeSystemPros          MsgType = 103
	MsgTypeCallBack            MsgType = 104
	MsgTypePetDefence          MsgType = 201
	MsgTypePetSystemSend       MsgType = 202
	MsgTypePetSteal            MsgType = 203
	MsgTypeManorPhoto          MsgType = 250
	MsgTypeEctypeInvite        MsgType = 400
	MsgTypeMondayReward        MsgType = 655
	MsgTypeLuckTakeAwayEnemy   MsgType = 667
	MsgTypeGoldShieldDisAppear MsgType = 668
	MsgTypeTribeReward         MsgType = 700
	MsgTypeTribeKick           MsgType = 701
	MsgTypeTribeJoin           MsgType = 702
	MsgTypeKKKK                MsgType = 704
	MsgTypeMagicTreeFull       MsgType = 705
	MsgTypeRecallFirstPic      MsgType = 901
	MsgTypeRecallSecondPic     MsgType = 902
	MsgTypeGungeoRewardNew     MsgType = 10001
)

var MsgType_name = map[int32]string{
	0:     "MsgTypeInit",
	1:     "MsgTypeWanted",
	2:     "MsgTypeAttackDefense",
	3:     "MsgTypeAttackDamage",
	4:     "MsgTypeAttackDestroy",
	5:     "MsgTypeSteal",
	6:     "MsgTypeSelf",
	7:     "MsgTypeBeWanted",
	8:     "MsgTypeHelpWanted",
	9:     "MsgTypeUseWanted",
	101:   "MsgTypeInvite",
	102:   "MsgTypeSystem",
	103:   "MsgTypeSystemPros",
	104:   "MsgTypeCallBack",
	201:   "MsgTypePetDefence",
	202:   "MsgTypePetSystemSend",
	203:   "MsgTypePetSteal",
	250:   "MsgTypeManorPhoto",
	400:   "MsgTypeEctypeInvite",
	655:   "MsgTypeMondayReward",
	667:   "MsgTypeLuckTakeAwayEnemy",
	668:   "MsgTypeGoldShieldDisAppear",
	700:   "MsgTypeTribeReward",
	701:   "MsgTypeTribeKick",
	702:   "MsgTypeTribeJoin",
	704:   "MsgTypeKKKK",
	705:   "MsgTypeMagicTreeFull",
	901:   "MsgTypeRecallFirstPic",
	902:   "MsgTypeRecallSecondPic",
	10001: "MsgTypeGungeoRewardNew",
}

var MsgType_value = map[string]int32{
	"MsgTypeInit":                0,
	"MsgTypeWanted":              1,
	"MsgTypeAttackDefense":       2,
	"MsgTypeAttackDamage":        3,
	"MsgTypeAttackDestroy":       4,
	"MsgTypeSteal":               5,
	"MsgTypeSelf":                6,
	"MsgTypeBeWanted":            7,
	"MsgTypeHelpWanted":          8,
	"MsgTypeUseWanted":           9,
	"MsgTypeInvite":              101,
	"MsgTypeSystem":              102,
	"MsgTypeSystemPros":          103,
	"MsgTypeCallBack":            104,
	"MsgTypePetDefence":          201,
	"MsgTypePetSystemSend":       202,
	"MsgTypePetSteal":            203,
	"MsgTypeManorPhoto":          250,
	"MsgTypeEctypeInvite":        400,
	"MsgTypeMondayReward":        655,
	"MsgTypeLuckTakeAwayEnemy":   667,
	"MsgTypeGoldShieldDisAppear": 668,
	"MsgTypeTribeReward":         700,
	"MsgTypeTribeKick":           701,
	"MsgTypeTribeJoin":           702,
	"MsgTypeKKKK":                704,
	"MsgTypeMagicTreeFull":       705,
	"MsgTypeRecallFirstPic":      901,
	"MsgTypeRecallSecondPic":     902,
	"MsgTypeGungeoRewardNew":     10001,
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{16}
}

type MsgStatus int32

const (
	MsgStatusUnRead   MsgStatus = 0
	MsgStatusRewarded MsgStatus = 1
)

var MsgStatus_name = map[int32]string{
	0: "MsgStatusUnRead",
	1: "MsgStatusRewarded",
}

var MsgStatus_value = map[string]int32{
	"MsgStatusUnRead":   0,
	"MsgStatusRewarded": 1,
}

func (MsgStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{17}
}

type FriendType int32

const (
	FriendTypeInit FriendType = 0
	FriendTypeApp  FriendType = 1
	FriendTypeGame FriendType = 2
)

var FriendType_name = map[int32]string{
	0: "FriendTypeInit",
	1: "FriendTypeApp",
	2: "FriendTypeGame",
}

var FriendType_value = map[string]int32{
	"FriendTypeInit": 0,
	"FriendTypeApp":  1,
	"FriendTypeGame": 2,
}

func (FriendType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{18}
}

type InviteType int32

const (
	InviteTypeInit      InviteType = 0
	InviteTypeFB        InviteType = 1
	InviteTypeMessenger InviteType = 2
)

var InviteType_name = map[int32]string{
	0: "InviteTypeInit",
	1: "InviteTypeFB",
	2: "InviteTypeMessenger",
}

var InviteType_value = map[string]int32{
	"InviteTypeInit":      0,
	"InviteTypeFB":        1,
	"InviteTypeMessenger": 2,
}

func (InviteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{19}
}

type PetMsgType int32

const (
	PetMsgTypeInit  PetMsgType = 0
	PetMsgTypeHelp  PetMsgType = 1
	PetMsgTypeTouch PetMsgType = 2
	PetMsgTypeHit   PetMsgType = 3
)

var PetMsgType_name = map[int32]string{
	0: "PetMsgTypeInit",
	1: "PetMsgTypeHelp",
	2: "PetMsgTypeTouch",
	3: "PetMsgTypeHit",
}

var PetMsgType_value = map[string]int32{
	"PetMsgTypeInit":  0,
	"PetMsgTypeHelp":  1,
	"PetMsgTypeTouch": 2,
	"PetMsgTypeHit":   3,
}

func (PetMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{20}
}

type PropertyType int32

const (
	PropertyTypeInit        PropertyType = 0
	PropertyTypeWanted      PropertyType = 1
	PropertyTypeBigWanted   PropertyType = 2
	PropertyTypeMiniShield  PropertyType = 3
	PropertyTypePetExp      PropertyType = 4
	PropertyTypeSnowBall    PropertyType = 5
	PropertyTypeMagicBottle PropertyType = 6
	PropertyTypePetSnacks   PropertyType = 7
	PropertyTypeSummon      PropertyType = 8
	PropertyTypeCannonball  PropertyType = 9
	PropertyTypeTrumpet     PropertyType = 10
	PropertyTypeVIP         PropertyType = 11
	PropertyTypeDart        PropertyType = 12
	PropertyTypePetMuppet   PropertyType = 13
	PropertyTypePetLagSpike PropertyType = 14
	PropertyTypeMagicPiece  PropertyType = 15
	PropertyTypeFruit       PropertyType = 16
	PropertyTypePassCard    PropertyType = 17
	PropertyTypeMoney       PropertyType = 18
	PropertyTypeDiamond     PropertyType = 19
	PropertyTypeShield      PropertyType = 20
	PropertyTypeEnergy      PropertyType = 21
	PropertyTypeRefresh     PropertyType = 22
	PropertyTypeFuel        PropertyType = 23
	PropertyTypeSaw         PropertyType = 24
	PropertyTypeDonuts      PropertyType = 25
	PropertyTypeCardCannon  PropertyType = 26
	PropertyTypeCardGold    PropertyType = 27
	PropertyTypeCardShield  PropertyType = 28
	PropertyTypeHeart       PropertyType = 29
	PropertyTypeGoldShield  PropertyType = 30
	PropertyTypeIkRefrelsh  PropertyType = 31
	PropertyTypeWBall       PropertyType = 32
	PropertyTypeCandy       PropertyType = 33
	PropertyTypeBroken      PropertyType = 34
	PropertyTypePowerfulPic PropertyType = 35
	PropertyTypeTicket      PropertyType = 36
)

var PropertyType_name = map[int32]string{
	0:  "PropertyTypeInit",
	1:  "PropertyTypeWanted",
	2:  "PropertyTypeBigWanted",
	3:  "PropertyTypeMiniShield",
	4:  "PropertyTypePetExp",
	5:  "PropertyTypeSnowBall",
	6:  "PropertyTypeMagicBottle",
	7:  "PropertyTypePetSnacks",
	8:  "PropertyTypeSummon",
	9:  "PropertyTypeCannonball",
	10: "PropertyTypeTrumpet",
	11: "PropertyTypeVIP",
	12: "PropertyTypeDart",
	13: "PropertyTypePetMuppet",
	14: "PropertyTypePetLagSpike",
	15: "PropertyTypeMagicPiece",
	16: "PropertyTypeFruit",
	17: "PropertyTypePassCard",
	18: "PropertyTypeMoney",
	19: "PropertyTypeDiamond",
	20: "PropertyTypeShield",
	21: "PropertyTypeEnergy",
	22: "PropertyTypeRefresh",
	23: "PropertyTypeFuel",
	24: "PropertyTypeSaw",
	25: "PropertyTypeDonuts",
	26: "PropertyTypeCardCannon",
	27: "PropertyTypeCardGold",
	28: "PropertyTypeCardShield",
	29: "PropertyTypeHeart",
	30: "PropertyTypeGoldShield",
	31: "PropertyTypeIkRefrelsh",
	32: "PropertyTypeWBall",
	33: "PropertyTypeCandy",
	34: "PropertyTypeBroken",
	35: "PropertyTypePowerfulPic",
	36: "PropertyTypeTicket",
}

var PropertyType_value = map[string]int32{
	"PropertyTypeInit":        0,
	"PropertyTypeWanted":      1,
	"PropertyTypeBigWanted":   2,
	"PropertyTypeMiniShield":  3,
	"PropertyTypePetExp":      4,
	"PropertyTypeSnowBall":    5,
	"PropertyTypeMagicBottle": 6,
	"PropertyTypePetSnacks":   7,
	"PropertyTypeSummon":      8,
	"PropertyTypeCannonball":  9,
	"PropertyTypeTrumpet":     10,
	"PropertyTypeVIP":         11,
	"PropertyTypeDart":        12,
	"PropertyTypePetMuppet":   13,
	"PropertyTypePetLagSpike": 14,
	"PropertyTypeMagicPiece":  15,
	"PropertyTypeFruit":       16,
	"PropertyTypePassCard":    17,
	"PropertyTypeMoney":       18,
	"PropertyTypeDiamond":     19,
	"PropertyTypeShield":      20,
	"PropertyTypeEnergy":      21,
	"PropertyTypeRefresh":     22,
	"PropertyTypeFuel":        23,
	"PropertyTypeSaw":         24,
	"PropertyTypeDonuts":      25,
	"PropertyTypeCardCannon":  26,
	"PropertyTypeCardGold":    27,
	"PropertyTypeCardShield":  28,
	"PropertyTypeHeart":       29,
	"PropertyTypeGoldShield":  30,
	"PropertyTypeIkRefrelsh":  31,
	"PropertyTypeWBall":       32,
	"PropertyTypeCandy":       33,
	"PropertyTypeBroken":      34,
	"PropertyTypePowerfulPic": 35,
	"PropertyTypeTicket":      36,
}

func (PropertyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{21}
}

type PropsGroup int32

const (
	PropsGroupInit      PropsGroup = 0
	PropsGroupPermanent PropsGroup = 1
	PropsGroupAction    PropsGroup = 2
	PropsGroupExpire    PropsGroup = 3
)

var PropsGroup_name = map[int32]string{
	0: "PropsGroupInit",
	1: "PropsGroupPermanent",
	2: "PropsGroupAction",
	3: "PropsGroupExpire",
}

var PropsGroup_value = map[string]int32{
	"PropsGroupInit":      0,
	"PropsGroupPermanent": 1,
	"PropsGroupAction":    2,
	"PropsGroupExpire":    3,
}

func (PropsGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{22}
}

type StrangeFriendApplyType int32

const (
	StrangeFriendApplyTypeInit    StrangeFriendApplyType = 0
	StrangeFriendApplyTypeActive  StrangeFriendApplyType = 1
	StrangeFriendApplyTypePassive StrangeFriendApplyType = 2
)

var StrangeFriendApplyType_name = map[int32]string{
	0: "StrangeFriendApplyTypeInit",
	1: "StrangeFriendApplyTypeActive",
	2: "StrangeFriendApplyTypePassive",
}

var StrangeFriendApplyType_value = map[string]int32{
	"StrangeFriendApplyTypeInit":    0,
	"StrangeFriendApplyTypeActive":  1,
	"StrangeFriendApplyTypePassive": 2,
}

func (StrangeFriendApplyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{23}
}

type StrangeFriendApplyStatus int32

const (
	StrangeFriendApplyStatusInit   StrangeFriendApplyStatus = 0
	StrangeFriendApplyStatusInvite StrangeFriendApplyStatus = 1
	StrangeFriendApplyStatusAgree  StrangeFriendApplyStatus = 2
	StrangeFriendApplyStatusReject StrangeFriendApplyStatus = 3
)

var StrangeFriendApplyStatus_name = map[int32]string{
	0: "StrangeFriendApplyStatusInit",
	1: "StrangeFriendApplyStatusInvite",
	2: "StrangeFriendApplyStatusAgree",
	3: "StrangeFriendApplyStatusReject",
}

var StrangeFriendApplyStatus_value = map[string]int32{
	"StrangeFriendApplyStatusInit":   0,
	"StrangeFriendApplyStatusInvite": 1,
	"StrangeFriendApplyStatusAgree":  2,
	"StrangeFriendApplyStatusReject": 3,
}

func (StrangeFriendApplyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{24}
}

type StrangeFriendAddType int32

const (
	StrangeFriendAddTypeInit   StrangeFriendAddType = 0
	StrangeFriendAddTypeNormal StrangeFriendAddType = 1
	StrangeFriendAddTypeAuto   StrangeFriendAddType = 2
)

var StrangeFriendAddType_name = map[int32]string{
	0: "StrangeFriendAddTypeInit",
	1: "StrangeFriendAddTypeNormal",
	2: "StrangeFriendAddTypeAuto",
}

var StrangeFriendAddType_value = map[string]int32{
	"StrangeFriendAddTypeInit":   0,
	"StrangeFriendAddTypeNormal": 1,
	"StrangeFriendAddTypeAuto":   2,
}

func (StrangeFriendAddType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{25}
}

type DataTransferType int32

const (
	DataTransferTypeAll                     DataTransferType = 0
	DataTransferTypeUserInfo                DataTransferType = 1
	DataTransferTypeUserData                DataTransferType = 2
	DataTransferTypeUserStat                DataTransferType = 3
	DataTransferTypeMsgCenter               DataTransferType = 4
	DataTransferTypeFruitMsg                DataTransferType = 5
	DataTransferTypeExchangeMsg             DataTransferType = 6
	DataTransferTypePetInfo                 DataTransferType = 7
	DataTransferTypePetMsg                  DataTransferType = 8
	DataTransferTypeFriendInfo              DataTransferType = 9
	DataTransferTypePayInfo                 DataTransferType = 10
	DataTransferTypeGuardCardInfo           DataTransferType = 11
	DataTransferTypeGuardCardMsg            DataTransferType = 12
	DataTransferTypeDeviceInfo              DataTransferType = 13
	DataTransferTypeWheelInfo               DataTransferType = 14
	DataTransferTypeWantedList              DataTransferType = 15
	DataTransferTypeEnemyList               DataTransferType = 16
	DataTransferTypeInviteFriend            DataTransferType = 17
	DataTransferTypeStrangeFriend           DataTransferType = 18
	DataTransferTypeAttackedRecordListTrans DataTransferType = 19
	DataTransferTypeMailListTrans           DataTransferType = 20
)

var DataTransferType_name = map[int32]string{
	0:  "DataTransferTypeAll",
	1:  "DataTransferTypeUserInfo",
	2:  "DataTransferTypeUserData",
	3:  "DataTransferTypeUserStat",
	4:  "DataTransferTypeMsgCenter",
	5:  "DataTransferTypeFruitMsg",
	6:  "DataTransferTypeExchangeMsg",
	7:  "DataTransferTypePetInfo",
	8:  "DataTransferTypePetMsg",
	9:  "DataTransferTypeFriendInfo",
	10: "DataTransferTypePayInfo",
	11: "DataTransferTypeGuardCardInfo",
	12: "DataTransferTypeGuardCardMsg",
	13: "DataTransferTypeDeviceInfo",
	14: "DataTransferTypeWheelInfo",
	15: "DataTransferTypeWantedList",
	16: "DataTransferTypeEnemyList",
	17: "DataTransferTypeInviteFriend",
	18: "DataTransferTypeStrangeFriend",
	19: "DataTransferTypeAttackedRecordListTrans",
	20: "DataTransferTypeMailListTrans",
}

var DataTransferType_value = map[string]int32{
	"DataTransferTypeAll":                     0,
	"DataTransferTypeUserInfo":                1,
	"DataTransferTypeUserData":                2,
	"DataTransferTypeUserStat":                3,
	"DataTransferTypeMsgCenter":               4,
	"DataTransferTypeFruitMsg":                5,
	"DataTransferTypeExchangeMsg":             6,
	"DataTransferTypePetInfo":                 7,
	"DataTransferTypePetMsg":                  8,
	"DataTransferTypeFriendInfo":              9,
	"DataTransferTypePayInfo":                 10,
	"DataTransferTypeGuardCardInfo":           11,
	"DataTransferTypeGuardCardMsg":            12,
	"DataTransferTypeDeviceInfo":              13,
	"DataTransferTypeWheelInfo":               14,
	"DataTransferTypeWantedList":              15,
	"DataTransferTypeEnemyList":               16,
	"DataTransferTypeInviteFriend":            17,
	"DataTransferTypeStrangeFriend":           18,
	"DataTransferTypeAttackedRecordListTrans": 19,
	"DataTransferTypeMailListTrans":           20,
}

func (DataTransferType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{26}
}

// 语言
type Language int32

const (
	LanguageDefault            Language = 0
	LanguageEnglish            Language = 1
	LanguageChineseSimplified  Language = 2
	LanguageChineseTraditional Language = 3
	LanguageThai               Language = 4
	LanguageVietnamese         Language = 5
)

var Language_name = map[int32]string{
	0: "LanguageDefault",
	1: "LanguageEnglish",
	2: "LanguageChineseSimplified",
	3: "LanguageChineseTraditional",
	4: "LanguageThai",
	5: "LanguageVietnamese",
}

var Language_value = map[string]int32{
	"LanguageDefault":            0,
	"LanguageEnglish":            1,
	"LanguageChineseSimplified":  2,
	"LanguageChineseTraditional": 3,
	"LanguageThai":               4,
	"LanguageVietnamese":         5,
}

func (Language) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{27}
}

// 奖励发放
type ConstRewardType int32

const (
	ConstRewardTypeInit       ConstRewardType = 0
	ConstRewardTypeBindReward ConstRewardType = 1
)

var ConstRewardType_name = map[int32]string{
	0: "ConstRewardTypeInit",
	1: "ConstRewardTypeBindReward",
}

var ConstRewardType_value = map[string]int32{
	"ConstRewardTypeInit":       0,
	"ConstRewardTypeBindReward": 1,
}

func (ConstRewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{28}
}

type WheelResultType int32

const (
	WheelResultTypeDefault WheelResultType = 0
	WheelResultTypeMoney   WheelResultType = 1
	WheelResultTypeFire    WheelResultType = 2
	WheelResultTypeSteal   WheelResultType = 3
	WheelResultTypeShield  WheelResultType = 4
	WheelResultTypeEnergy  WheelResultType = 5
	WheelResultTypeStarMul WheelResultType = 6
)

var WheelResultType_name = map[int32]string{
	0: "WheelResultTypeDefault",
	1: "WheelResultTypeMoney",
	2: "WheelResultTypeFire",
	3: "WheelResultTypeSteal",
	4: "WheelResultTypeShield",
	5: "WheelResultTypeEnergy",
	6: "WheelResultTypeStarMul",
}

var WheelResultType_value = map[string]int32{
	"WheelResultTypeDefault": 0,
	"WheelResultTypeMoney":   1,
	"WheelResultTypeFire":    2,
	"WheelResultTypeSteal":   3,
	"WheelResultTypeShield":  4,
	"WheelResultTypeEnergy":  5,
	"WheelResultTypeStarMul": 6,
}

func (WheelResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{29}
}

type IPCMessageID int32

const (
	IPCMessageLoginEvent   IPCMessageID = 0
	IPCMessageMoneyEvent   IPCMessageID = 1
	IPCMessageStealPoolReq IPCMessageID = 2
	IPCMessageStealEvent   IPCMessageID = 3
	IPCMessageLockEvent    IPCMessageID = 4
)

var IPCMessageID_name = map[int32]string{
	0: "IPCMessageLoginEvent",
	1: "IPCMessageMoneyEvent",
	2: "IPCMessageStealPoolReq",
	3: "IPCMessageStealEvent",
	4: "IPCMessageLockEvent",
}

var IPCMessageID_value = map[string]int32{
	"IPCMessageLoginEvent":   0,
	"IPCMessageMoneyEvent":   1,
	"IPCMessageStealPoolReq": 2,
	"IPCMessageStealEvent":   3,
	"IPCMessageLockEvent":    4,
}

func (IPCMessageID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{30}
}

func init() {
	proto.RegisterEnum("proto.GenderType", GenderType_name, GenderType_value)
	proto.RegisterEnum("proto.CKType", CKType_name, CKType_value)
	proto.RegisterEnum("proto.LoginType", LoginType_name, LoginType_value)
	proto.RegisterEnum("proto.UserStatus", UserStatus_name, UserStatus_value)
	proto.RegisterEnum("proto.PetStatus", PetStatus_name, PetStatus_value)
	proto.RegisterEnum("proto.BuildingStatus", BuildingStatus_name, BuildingStatus_value)
	proto.RegisterEnum("proto.EnemyListType", EnemyListType_name, EnemyListType_value)
	proto.RegisterEnum("proto.AttackFriendType", AttackFriendType_name, AttackFriendType_value)
	proto.RegisterEnum("proto.AttackRecordType", AttackRecordType_name, AttackRecordType_value)
	proto.RegisterEnum("proto.WantedType", WantedType_name, WantedType_value)
	proto.RegisterEnum("proto.OnlineStatus", OnlineStatus_name, OnlineStatus_value)
	proto.RegisterEnum("proto.UserMsgType", UserMsgType_name, UserMsgType_value)
	proto.RegisterEnum("proto.UserMsgMod", UserMsgMod_name, UserMsgMod_value)
	proto.RegisterEnum("proto.UserMsgTypePhp", UserMsgTypePhp_name, UserMsgTypePhp_value)
	proto.RegisterEnum("proto.GuardCardSendType", GuardCardSendType_name, GuardCardSendType_value)
	proto.RegisterEnum("proto.UserMsgStatus", UserMsgStatus_name, UserMsgStatus_value)
	proto.RegisterEnum("proto.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("proto.MsgStatus", MsgStatus_name, MsgStatus_value)
	proto.RegisterEnum("proto.FriendType", FriendType_name, FriendType_value)
	proto.RegisterEnum("proto.InviteType", InviteType_name, InviteType_value)
	proto.RegisterEnum("proto.PetMsgType", PetMsgType_name, PetMsgType_value)
	proto.RegisterEnum("proto.PropertyType", PropertyType_name, PropertyType_value)
	proto.RegisterEnum("proto.PropsGroup", PropsGroup_name, PropsGroup_value)
	proto.RegisterEnum("proto.StrangeFriendApplyType", StrangeFriendApplyType_name, StrangeFriendApplyType_value)
	proto.RegisterEnum("proto.StrangeFriendApplyStatus", StrangeFriendApplyStatus_name, StrangeFriendApplyStatus_value)
	proto.RegisterEnum("proto.StrangeFriendAddType", StrangeFriendAddType_name, StrangeFriendAddType_value)
	proto.RegisterEnum("proto.DataTransferType", DataTransferType_name, DataTransferType_value)
	proto.RegisterEnum("proto.Language", Language_name, Language_value)
	proto.RegisterEnum("proto.ConstRewardType", ConstRewardType_name, ConstRewardType_value)
	proto.RegisterEnum("proto.WheelResultType", WheelResultType_name, WheelResultType_value)
	proto.RegisterEnum("proto.IPCMessageID", IPCMessageID_name, IPCMessageID_value)
}

func init() { proto.RegisterFile("enum.proto", fileDescriptor_13a9f1b5947140c8) }

var fileDescriptor_13a9f1b5947140c8 = []byte{
	// 2173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x58, 0xbd, 0x73, 0xe3, 0xc6,
	0x15, 0x17, 0x48, 0x91, 0x92, 0x9e, 0xbe, 0x9e, 0xa0, 0x6f, 0xe9, 0x4e, 0xb6, 0x95, 0xcc, 0x64,
	0x06, 0x99, 0x49, 0x93, 0xf1, 0xa4, 0x48, 0x25, 0x8a, 0x92, 0x4e, 0x96, 0x28, 0xf3, 0x44, 0x9d,
	0x75, 0x93, 0xc9, 0x4c, 0x66, 0x0f, 0x78, 0x24, 0x37, 0x04, 0x17, 0x0c, 0xb0, 0x38, 0x9d, 0x8a,
	0x4c, 0xaa, 0xb8, 0x8d, 0xaf, 0x75, 0xe2, 0x3a, 0x8d, 0x9b, 0xa4, 0x8e, 0xe3, 0xa4, 0xf1, 0x5c,
	0x3e, 0x0a, 0xff, 0x09, 0xf1, 0x55, 0x29, 0x53, 0xb8, 0x4a, 0x95, 0x59, 0x2c, 0x48, 0x00, 0x4b,
	0x28, 0x15, 0xb9, 0xbf, 0xdf, 0xee, 0x7b, 0x6f, 0xdf, 0xbe, 0xf7, 0xf6, 0x2d, 0x00, 0x48, 0xc4,
	0xc3, 0x1f, 0x8c, 0xc2, 0x40, 0x06, 0x76, 0x2d, 0xf9, 0x71, 0x3e, 0x00, 0x38, 0x23, 0xe1, 0x51,
	0x78, 0x73, 0x3f, 0x22, 0xdb, 0x86, 0x95, 0x6c, 0x74, 0x2e, 0xb8, 0xc4, 0x99, 0x22, 0xd6, 0x62,
	0x3e, 0xa1, 0x65, 0x6f, 0x00, 0x66, 0xd8, 0x29, 0x0d, 0x15, 0x5a, 0x71, 0x7e, 0x0c, 0xf5, 0xe3,
	0x8b, 0x44, 0xce, 0x0a, 0x80, 0xfe, 0x97, 0xca, 0x58, 0x85, 0x45, 0x3d, 0xbe, 0x0e, 0x5e, 0x04,
	0x12, 0x2d, 0x1b, 0x61, 0x49, 0x03, 0xa7, 0x21, 0x27, 0xe1, 0x61, 0xc5, 0xf9, 0xc6, 0x82, 0x85,
	0xcb, 0xa0, 0xc7, 0xc5, 0xd8, 0x90, 0xc9, 0xe0, 0x2c, 0xa6, 0x48, 0x09, 0xd9, 0x84, 0xb5, 0x09,
	0x76, 0xca, 0x5c, 0x7a, 0x11, 0x04, 0x03, 0xb4, 0x94, 0xec, 0x09, 0xfc, 0xf4, 0x29, 0x56, 0x0a,
	0xc0, 0xed, 0x73, 0xac, 0x2a, 0x65, 0x13, 0xe0, 0xc8, 0xe7, 0x38, 0x5b, 0x10, 0x7f, 0x34, 0x1a,
	0xf9, 0x84, 0x35, 0x7b, 0x0d, 0x96, 0x73, 0x72, 0x9e, 0xbc, 0x8f, 0xf5, 0x02, 0x74, 0xfb, 0xfc,
	0xc9, 0xfb, 0x38, 0x57, 0x58, 0xf9, 0xf4, 0x27, 0x1f, 0x5e, 0x9d, 0xe0, 0x7c, 0x01, 0xbb, 0x7d,
	0x7e, 0x34, 0x1a, 0xe1, 0x82, 0xbd, 0x0e, 0xab, 0x19, 0x46, 0x6e, 0x9f, 0x49, 0x5c, 0x74, 0xba,
	0x00, 0xcf, 0x22, 0x0a, 0x3b, 0x92, 0xc9, 0x38, 0x52, 0x4e, 0xcc, 0x46, 0x57, 0x41, 0x38, 0x64,
	0xbe, 0xde, 0x65, 0x86, 0x36, 0xfc, 0xc0, 0x1d, 0x90, 0x87, 0x56, 0x11, 0x6e, 0x92, 0x4f, 0x92,
	0x3c, 0xac, 0x14, 0x65, 0x74, 0xfa, 0xb1, 0x7c, 0x36, 0xc2, 0xaa, 0xd3, 0x81, 0x85, 0x36, 0xc9,
	0x54, 0xcd, 0x16, 0xd8, 0x93, 0xc1, 0x33, 0xd1, 0x67, 0xd2, 0xed, 0x93, 0x87, 0x33, 0x05, 0xfc,
	0x44, 0x50, 0xd8, 0x23, 0xc9, 0x5d, 0xb4, 0x8a, 0xf8, 0xab, 0x3e, 0x8b, 0xa3, 0x44, 0x95, 0xf3,
	0x33, 0x58, 0x69, 0xc4, 0xdc, 0xf7, 0xb8, 0xe8, 0xa5, 0x92, 0x77, 0x60, 0xa3, 0x88, 0x4c, 0x36,
	0x31, 0xc5, 0x34, 0xd9, 0x90, 0xf5, 0x54, 0xe4, 0xec, 0xc2, 0xa6, 0xc1, 0x50, 0x24, 0xc3, 0xe0,
	0x1e, 0x2b, 0x8e, 0x80, 0xe5, 0x13, 0x41, 0xc3, 0xfb, 0x4b, 0x1e, 0xc9, 0x24, 0x08, 0x36, 0x61,
	0xad, 0x00, 0xa4, 0xc1, 0xb4, 0x05, 0x76, 0x01, 0xbe, 0x09, 0x24, 0xf3, 0xb5, 0x8b, 0x0a, 0xf8,
	0x2d, 0xd1, 0x00, 0x2b, 0xf6, 0x36, 0xac, 0x17, 0xe0, 0x6b, 0x72, 0x49, 0x48, 0xac, 0x3a, 0xbf,
	0x02, 0x3c, 0x92, 0x92, 0xb9, 0x03, 0x1d, 0x83, 0x89, 0xca, 0x1d, 0xd8, 0x30, 0xb1, 0x54, 0xeb,
	0x1e, 0x6c, 0x99, 0xcc, 0x87, 0xc2, 0xe7, 0x22, 0xdd, 0x94, 0xc9, 0x25, 0x2a, 0xb1, 0x52, 0xb6,
	0x6c, 0x62, 0xc0, 0x67, 0xd6, 0xd8, 0x82, 0x6b, 0x72, 0x83, 0xd0, 0xb0, 0x20, 0xc3, 0x52, 0x0b,
	0xf6, 0x61, 0xdb, 0x64, 0x9a, 0xd4, 0x25, 0x11, 0x11, 0x42, 0xa6, 0x27, 0x47, 0x6a, 0x9f, 0x2f,
	0x96, 0x2f, 0xd4, 0x5e, 0x5f, 0xca, 0x6c, 0xcf, 0xc8, 0x8e, 0x24, 0xe6, 0xe3, 0x86, 0x73, 0x0e,
	0x70, 0xcb, 0x84, 0x24, 0x6f, 0x9c, 0x92, 0xd9, 0x28, 0x35, 0x69, 0x03, 0x30, 0xc3, 0xd2, 0xd3,
	0xb7, 0x54, 0xda, 0x64, 0x68, 0x83, 0xf7, 0xb0, 0xe2, 0x3c, 0x83, 0x25, 0xed, 0xad, 0x2c, 0xf6,
	0xf3, 0xe3, 0x54, 0xdc, 0x36, 0xac, 0xe7, 0xd1, 0x0f, 0xbb, 0xdd, 0xd4, 0xc1, 0x5b, 0x60, 0x17,
	0x08, 0xed, 0xf8, 0x8a, 0xe3, 0xc1, 0xa2, 0x0a, 0xff, 0x56, 0xd4, 0x4b, 0x4c, 0x5c, 0x87, 0xd5,
	0xdc, 0x30, 0xab, 0x5f, 0x39, 0xf0, 0xc8, 0x57, 0x16, 0x16, 0x27, 0x76, 0x92, 0x0a, 0xa4, 0xb4,
	0xe7, 0xc0, 0x93, 0x57, 0x6e, 0x9f, 0x89, 0x1e, 0x61, 0xd5, 0x09, 0x74, 0xda, 0xb6, 0xa2, 0x5e,
	0x2b, 0xf0, 0x72, 0xf2, 0x5a, 0x81, 0x97, 0xea, 0xc8, 0xe4, 0xb5, 0x02, 0xef, 0x34, 0x8c, 0xb9,
	0xaa, 0x71, 0xfb, 0xb0, 0x9d, 0x81, 0xcd, 0x58, 0xf4, 0x28, 0x10, 0x47, 0x51, 0xc4, 0x23, 0x89,
	0x95, 0x52, 0xf2, 0x9a, 0xee, 0x58, 0xe8, 0x61, 0xd5, 0xf1, 0x0b, 0x26, 0xb7, 0xfb, 0x23, 0xe5,
	0x80, 0x22, 0x92, 0x2a, 0x7e, 0x17, 0xf6, 0x8b, 0x78, 0x51, 0xcf, 0x27, 0x57, 0x0f, 0xce, 0x48,
	0x95, 0xbd, 0xbe, 0x72, 0x7a, 0xb0, 0x76, 0x16, 0xb3, 0xd0, 0x3b, 0x66, 0xa1, 0xd7, 0x19, 0x27,
	0xc2, 0x2e, 0x6c, 0x4e, 0x81, 0xa9, 0xce, 0x32, 0x2a, 0x71, 0xa1, 0x65, 0x3f, 0x82, 0x9d, 0x29,
	0x4a, 0x85, 0x3b, 0x7f, 0xa9, 0x4e, 0xeb, 0x0b, 0x0b, 0x96, 0x53, 0x5b, 0xd2, 0x30, 0x48, 0xab,
	0xda, 0x04, 0xc8, 0x32, 0xbc, 0x00, 0x1f, 0xf5, 0x42, 0x52, 0x61, 0x90, 0x9d, 0x90, 0xc6, 0xaf,
	0xa9, 0x1b, 0x47, 0x84, 0x15, 0x95, 0x34, 0x45, 0x22, 0x16, 0x82, 0x8b, 0x1e, 0x56, 0xa7, 0x98,
	0x4e, 0xec, 0xba, 0x14, 0x45, 0x38, 0x3b, 0x25, 0xec, 0x94, 0x71, 0x9f, 0x3c, 0xac, 0x95, 0x68,
	0x49, 0x3c, 0x55, 0x77, 0x3e, 0xae, 0xc3, 0xdc, 0x38, 0xd4, 0x56, 0x61, 0xb1, 0x18, 0x66, 0x6b,
	0xb0, 0x9c, 0x02, 0x3a, 0xf6, 0xd1, 0x52, 0xba, 0xc7, 0x51, 0x97, 0x64, 0xd8, 0x38, 0x5b, 0x93,
	0x50, 0x2b, 0x32, 0x3a, 0x55, 0xab, 0x25, 0x4b, 0x74, 0x9e, 0xce, 0xaa, 0x4b, 0x6c, 0x1c, 0xae,
	0x49, 0x7a, 0xd6, 0x72, 0x26, 0x74, 0xc8, 0xef, 0x62, 0x5d, 0x45, 0x61, 0x0a, 0x34, 0xc6, 0x46,
	0xcc, 0x29, 0x17, 0xa7, 0xe0, 0x13, 0xf2, 0x47, 0x29, 0x3c, 0xaf, 0x12, 0x30, 0x85, 0x9f, 0x45,
	0xe3, 0xc9, 0x0b, 0xb9, 0x4d, 0x9c, 0x8b, 0x97, 0x5c, 0x12, 0x52, 0x0e, 0xea, 0xdc, 0x47, 0x92,
	0x86, 0xd8, 0xcd, 0x89, 0xd4, 0x50, 0x3b, 0x0c, 0x22, 0xec, 0xe5, 0xd4, 0x1f, 0x33, 0xdf, 0x6f,
	0x30, 0x77, 0x80, 0x7d, 0x7b, 0x6b, 0x32, 0xb7, 0x4d, 0x32, 0x71, 0x80, 0x4b, 0xf8, 0x37, 0x55,
	0x32, 0x37, 0x32, 0x5c, 0x8b, 0x49, 0x62, 0xe8, 0xef, 0xaa, 0xb9, 0x58, 0xcd, 0x51, 0xc9, 0x66,
	0xff, 0x61, 0xe5, 0x04, 0xb5, 0x98, 0x08, 0xc2, 0x76, 0x3f, 0x90, 0x01, 0xfe, 0x57, 0x39, 0x79,
	0xec, 0xca, 0x13, 0x57, 0x66, 0x86, 0x7f, 0x52, 0xcd, 0x31, 0xad, 0x40, 0x78, 0xec, 0x3e, 0x3d,
	0xc7, 0xdf, 0xd4, 0xec, 0xc7, 0xb0, 0x93, 0x32, 0x97, 0xb1, 0x3b, 0xb8, 0x61, 0x03, 0x3a, 0xba,
	0x63, 0xf7, 0xba, 0x64, 0xff, 0xb6, 0x66, 0xbf, 0x03, 0x7b, 0x29, 0x7d, 0x16, 0xf8, 0x5e, 0xa7,
	0xcf, 0xc9, 0xf7, 0x9a, 0x3c, 0x3a, 0x1a, 0x8d, 0x88, 0x85, 0xf8, 0x3b, 0x15, 0x21, 0x76, 0x3a,
	0xe1, 0x26, 0xe4, 0x2f, 0x28, 0x15, 0xfc, 0xa7, 0x9a, 0xbd, 0x39, 0xf1, 0x6a, 0x42, 0x5c, 0x70,
	0x77, 0x80, 0x5f, 0x4c, 0xc1, 0x1f, 0x04, 0x5c, 0xe0, 0x9f, 0x6b, 0x36, 0x4e, 0x0e, 0xf0, 0xe2,
	0xe2, 0xe2, 0x02, 0xff, 0x52, 0xcb, 0x79, 0xa5, 0xc5, 0x7a, 0xdc, 0xbd, 0x09, 0x89, 0x4e, 0x63,
	0xdf, 0xc7, 0xbf, 0xd6, 0xec, 0x3d, 0xd8, 0x4c, 0xa9, 0x6b, 0x72, 0x99, 0xef, 0x9f, 0xf2, 0x30,
	0x92, 0x6d, 0xee, 0xe2, 0xaf, 0xe7, 0xec, 0x7d, 0xd8, 0x2a, 0x70, 0x1d, 0x72, 0x03, 0xe1, 0x29,
	0xf2, 0xe3, 0x3c, 0x79, 0x96, 0x64, 0xbe, 0xb6, 0xf6, 0x8a, 0xee, 0xf0, 0xf5, 0xd5, 0xe1, 0xec,
	0xbc, 0x8b, 0xee, 0x61, 0x7d, 0xfe, 0x8d, 0x85, 0x6f, 0xac, 0xc3, 0xfa, 0xfc, 0xe7, 0x15, 0xfc,
	0xbc, 0x72, 0x58, 0x9f, 0xff, 0xb4, 0x86, 0x9f, 0xd6, 0x0e, 0xeb, 0xf3, 0xdf, 0x56, 0xf1, 0xdb,
	0xea, 0x61, 0x7d, 0xfe, 0xcb, 0x1a, 0x7e, 0xa9, 0xc6, 0x5f, 0xd5, 0xf0, 0xab, 0x9a, 0xf3, 0x23,
	0x58, 0xc8, 0x72, 0x58, 0x1f, 0xfb, 0xb8, 0xbf, 0xb8, 0x26, 0xe6, 0xe9, 0x2e, 0xc6, 0xc8, 0x1f,
	0x95, 0x11, 0xce, 0x19, 0x40, 0xee, 0xb2, 0xb5, 0x61, 0x65, 0xea, 0x9a, 0x5d, 0x83, 0xe5, 0x0c,
	0x53, 0xad, 0x94, 0x55, 0x9c, 0x76, 0xc6, 0x86, 0xaa, 0x94, 0x5c, 0x00, 0xe8, 0x83, 0x1e, 0x0b,
	0xca, 0x46, 0xa9, 0x20, 0x84, 0xa5, 0x0c, 0x3b, 0x6d, 0xe8, 0xea, 0x91, 0x21, 0x2d, 0x8a, 0x22,
	0x12, 0x3d, 0x0a, 0xb1, 0xe2, 0xfc, 0x14, 0xa0, 0x4d, 0x72, 0x9c, 0xd9, 0x36, 0xac, 0x64, 0xa3,
	0xec, 0x0e, 0xc9, 0x30, 0x95, 0x47, 0xfa, 0x0e, 0xc9, 0xb0, 0x9b, 0x20, 0x76, 0xfb, 0x58, 0x51,
	0xe6, 0xe7, 0x26, 0x72, 0x75, 0xcb, 0xff, 0x71, 0x0e, 0x96, 0xda, 0x61, 0x30, 0xa2, 0x50, 0xde,
	0x27, 0x0a, 0x36, 0x00, 0xf3, 0xe3, 0xac, 0xe6, 0xe5, 0xd1, 0x49, 0x11, 0xd9, 0x85, 0xcd, 0x3c,
	0xde, 0xe0, 0xbd, 0x94, 0x4a, 0x7a, 0x8b, 0x3c, 0xd5, 0xe2, 0x82, 0xeb, 0x60, 0xc5, 0xaa, 0x29,
	0xae, 0x4d, 0xf2, 0xe4, 0xd5, 0x08, 0x67, 0x55, 0x81, 0xc9, 0xe3, 0x1d, 0x11, 0xdc, 0x35, 0x98,
	0xaf, 0xca, 0xc9, 0x3e, 0x6c, 0x17, 0xa4, 0xa9, 0x00, 0x6c, 0x04, 0x52, 0xfa, 0x84, 0x75, 0xd3,
	0x0a, 0x95, 0x98, 0x82, 0xb9, 0x83, 0x08, 0xe7, 0x4c, 0x4d, 0x9d, 0x78, 0x38, 0x0c, 0x04, 0xce,
	0x9b, 0xd6, 0x1d, 0x33, 0x21, 0x02, 0xf1, 0x42, 0xe9, 0x5a, 0x50, 0x47, 0x91, 0xe7, 0x6e, 0xc2,
	0x78, 0x38, 0x22, 0x89, 0x90, 0x38, 0x35, 0x47, 0x7c, 0x74, 0xde, 0xc6, 0x45, 0xd3, 0x61, 0x4d,
	0x16, 0x4a, 0xdd, 0xb8, 0x18, 0x26, 0xb5, 0xe2, 0x91, 0x92, 0xb2, 0x6c, 0x6e, 0xa5, 0x4d, 0xf2,
	0x92, 0xf5, 0x3a, 0x23, 0x3e, 0x20, 0x5c, 0x99, 0xf2, 0x9a, 0xda, 0x67, 0x9b, 0x93, 0x4b, 0xb8,
	0xaa, 0xc2, 0x36, 0xcf, 0xe9, 0x9b, 0x1c, 0x4d, 0xa7, 0xb5, 0x59, 0x14, 0xa9, 0x1b, 0x0e, 0xd7,
	0xcc, 0x05, 0xad, 0x40, 0xd0, 0x3d, 0xda, 0xe6, 0xfe, 0x9a, 0x9c, 0x0d, 0x03, 0xe1, 0xe1, 0xfa,
	0x94, 0xb3, 0xf4, 0x71, 0x6d, 0x98, 0x78, 0xd2, 0x8f, 0xdf, 0xe3, 0xa6, 0x29, 0xe8, 0x9a, 0xba,
	0x21, 0x45, 0x7d, 0xdc, 0x32, 0x7d, 0x72, 0x1a, 0x93, 0x8f, 0xdb, 0xa6, 0xfb, 0x3a, 0xec, 0x0e,
	0x77, 0x4c, 0xd9, 0xcd, 0x40, 0xc4, 0x32, 0xc2, 0xdd, 0xe9, 0x03, 0x52, 0xf7, 0xb6, 0x3a, 0x24,
	0xdc, 0x33, 0x77, 0xac, 0x38, 0x55, 0x0b, 0x71, 0xbf, 0x6c, 0x55, 0xba, 0x8b, 0x47, 0xa6, 0x37,
	0x9e, 0x90, 0x3a, 0xa9, 0xc7, 0xe6, 0x92, 0xac, 0xa8, 0xe2, 0x81, 0xc9, 0x9d, 0x0f, 0x92, 0x2d,
	0xfa, 0x51, 0x1f, 0xdf, 0x31, 0xc5, 0xdd, 0x26, 0x81, 0xfa, 0xae, 0x09, 0x1f, 0x33, 0xe1, 0xdd,
	0xe3, 0x7b, 0xe6, 0x36, 0x1b, 0x61, 0x30, 0x20, 0x81, 0x87, 0x53, 0xc1, 0x10, 0xdc, 0x51, 0xd8,
	0x8d, 0x7d, 0x55, 0x1d, 0xbf, 0x63, 0x2e, 0xba, 0xe1, 0xee, 0x80, 0x24, 0x7e, 0xd7, 0x21, 0x00,
	0x85, 0x47, 0x67, 0x61, 0x10, 0x8f, 0x92, 0xf4, 0x9f, 0x8c, 0xb2, 0x5e, 0x35, 0xc3, 0xda, 0x14,
	0x0e, 0x99, 0x50, 0x5d, 0xbd, 0x35, 0x3e, 0x19, 0x4d, 0x1c, 0xb9, 0x92, 0x07, 0x42, 0x3f, 0xd4,
	0x32, 0xf4, 0xe4, 0xd5, 0x88, 0x87, 0xaa, 0xb3, 0xfc, 0x25, 0x6c, 0x75, 0x64, 0xa8, 0xda, 0x4c,
	0x5d, 0xe1, 0xd4, 0x5b, 0x54, 0x17, 0x89, 0x03, 0xd8, 0x2b, 0x67, 0x26, 0x8d, 0xdf, 0xa3, 0x72,
	0x5e, 0x69, 0x7c, 0xa9, 0x9a, 0xa5, 0xf7, 0xe0, 0x71, 0xf9, 0x0c, 0x15, 0xbe, 0xba, 0x21, 0xfb,
	0xbd, 0x05, 0x3b, 0xd3, 0x73, 0xd2, 0xba, 0x5e, 0xaa, 0xa1, 0xd0, 0xa6, 0x1d, 0xc2, 0xc1, 0xc3,
	0x33, 0x92, 0x5b, 0xf8, 0x01, 0x2b, 0xf2, 0x5d, 0x5d, 0xe5, 0xff, 0x89, 0xb9, 0xa6, 0x9f, 0x93,
	0xab, 0x8a, 0x68, 0x08, 0x1b, 0xc5, 0x39, 0x9e, 0xbe, 0x42, 0x1e, 0x99, 0x1b, 0xf0, 0xf2, 0x97,
	0xc9, 0x94, 0x13, 0xbd, 0xe2, 0x43, 0xe5, 0x81, 0xd5, 0x47, 0xb1, 0x0c, 0xb0, 0xe2, 0xfc, 0xa1,
	0x06, 0xd8, 0x64, 0x92, 0xdd, 0x84, 0x4c, 0x44, 0xdd, 0xf4, 0x0b, 0xc9, 0x36, 0xac, 0x9b, 0x98,
	0x7a, 0x52, 0xcc, 0x28, 0x59, 0x26, 0xa1, 0xba, 0xc8, 0x73, 0xd1, 0x0d, 0xb4, 0xa6, 0x32, 0x56,
	0x61, 0x58, 0x79, 0x88, 0x55, 0x3e, 0xc0, 0xaa, 0xfd, 0x18, 0x76, 0x4d, 0xb6, 0x15, 0xf5, 0x8e,
	0x49, 0x48, 0x0a, 0x71, 0xb6, 0x6c, 0x71, 0x52, 0xb7, 0x5a, 0x51, 0x0f, 0x55, 0x2f, 0xb3, 0x6f,
	0xb2, 0xe3, 0x97, 0x8d, 0x9a, 0x50, 0x57, 0xe9, 0x61, 0x4e, 0x68, 0x93, 0x4c, 0xcc, 0x9e, 0x53,
	0xd9, 0x59, 0x42, 0xaa, 0x85, 0xf3, 0xca, 0xb9, 0xd3, 0x7a, 0x95, 0x17, 0x93, 0xb5, 0x0b, 0xa5,
	0x82, 0xd9, 0x7d, 0x42, 0x82, 0x0a, 0x0b, 0x93, 0x9c, 0x3c, 0x1c, 0x92, 0x29, 0x8b, 0x2a, 0xfe,
	0x1e, 0x9c, 0xa2, 0x2c, 0x58, 0x2a, 0xb3, 0xa0, 0x49, 0x2f, 0xb9, 0x4b, 0x89, 0x84, 0xe5, 0x32,
	0xc7, 0xdd, 0xf6, 0x89, 0xfc, 0x84, 0x5e, 0x29, 0x5b, 0xae, 0xaf, 0xd6, 0x4b, 0xf5, 0x74, 0x5a,
	0x2d, 0x5b, 0x3e, 0xf9, 0x90, 0x80, 0x58, 0x66, 0x9f, 0x8e, 0xfa, 0xf4, 0x93, 0xd6, 0x5a, 0xd9,
	0x26, 0x0b, 0xe1, 0x86, 0xb6, 0xfd, 0x7d, 0xf8, 0xde, 0x54, 0x38, 0x25, 0x8d, 0x3f, 0x79, 0xfa,
	0x3d, 0x9e, 0x7c, 0xb5, 0x50, 0x2c, 0xae, 0x97, 0xc9, 0x6b, 0x31, 0xee, 0x67, 0x53, 0x36, 0x9c,
	0xcf, 0x2c, 0x98, 0xbf, 0x64, 0xa2, 0x17, 0xb3, 0x5e, 0xf2, 0x1c, 0x1e, 0xff, 0x6f, 0x52, 0x97,
	0xc5, 0x7e, 0xfa, 0x54, 0x1d, 0x83, 0x27, 0xa2, 0xe7, 0xf3, 0xa8, 0x8f, 0x96, 0xda, 0xea, 0x18,
	0x3c, 0xee, 0x73, 0x41, 0x11, 0x75, 0xf8, 0x70, 0xe4, 0xf3, 0x2e, 0x4f, 0x1a, 0x8d, 0x03, 0xd8,
	0x33, 0xe8, 0x9b, 0x90, 0x79, 0x5c, 0x95, 0x36, 0xe6, 0xa7, 0x1f, 0xd8, 0x52, 0xfe, 0xa6, 0xcf,
	0x38, 0xce, 0xaa, 0xba, 0x3a, 0x46, 0x3e, 0xe2, 0x24, 0x05, 0x1b, 0x52, 0x44, 0x58, 0x73, 0xce,
	0x61, 0xf5, 0x38, 0x10, 0x91, 0xd4, 0x3d, 0xe1, 0x38, 0xa3, 0x0c, 0x28, 0xcd, 0xde, 0xc7, 0xb0,
	0x6b, 0x10, 0x0d, 0x2e, 0xbc, 0xb4, 0xd9, 0xb6, 0x9c, 0x7f, 0x5a, 0xb0, 0x9a, 0x1c, 0xe7, 0x35,
	0x45, 0xb1, 0xaf, 0xbf, 0x18, 0xed, 0xc1, 0x96, 0x01, 0x65, 0x1b, 0xdf, 0x81, 0x0d, 0x83, 0xd3,
	0xb7, 0x75, 0xd2, 0x18, 0x1a, 0xcc, 0xa9, 0x2a, 0xcf, 0x95, 0x92, 0x25, 0xfa, 0x39, 0x52, 0x55,
	0xcd, 0x87, 0xc9, 0xe8, 0x1b, 0x6d, 0xb6, 0x84, 0x4a, 0x6f, 0xf3, 0x5a, 0x89, 0x79, 0x1d, 0xc9,
	0xc2, 0x56, 0xec, 0x63, 0xdd, 0x79, 0x6d, 0xc1, 0xd2, 0x79, 0xfb, 0x58, 0xf5, 0xa5, 0xac, 0x47,
	0xe7, 0x4d, 0xa5, 0x3c, 0x1b, 0x27, 0xdf, 0x12, 0x4f, 0x5e, 0xaa, 0x1b, 0x66, 0xa6, 0xc8, 0x24,
	0x9b, 0xd0, 0x8c, 0xa5, 0x14, 0x64, 0x4c, 0x62, 0x6b, 0x3b, 0x08, 0xfc, 0x6b, 0xfa, 0x85, 0xde,
	0x8c, 0xc1, 0xe9, 0x55, 0xd5, 0xa4, 0x31, 0xce, 0x69, 0x72, 0x07, 0x9a, 0x98, 0x6d, 0xec, 0x7c,
	0xfd, 0xcd, 0xc1, 0xcc, 0x9b, 0xb7, 0x07, 0xd6, 0xd7, 0x6f, 0x0f, 0xac, 0x7f, 0xbd, 0x3d, 0xb0,
	0xfe, 0xfd, 0xf6, 0x60, 0xe6, 0x3f, 0x6f, 0x0f, 0xac, 0x17, 0xf5, 0xe4, 0xeb, 0xf1, 0x0f, 0xff,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xee, 0xbe, 0x5b, 0xbf, 0x52, 0x16, 0x00, 0x00,
}

func (x GenderType) String() string {
	s, ok := GenderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CKType) String() string {
	s, ok := CKType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LoginType) String() string {
	s, ok := LoginType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserStatus) String() string {
	s, ok := UserStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PetStatus) String() string {
	s, ok := PetStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BuildingStatus) String() string {
	s, ok := BuildingStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EnemyListType) String() string {
	s, ok := EnemyListType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AttackFriendType) String() string {
	s, ok := AttackFriendType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AttackRecordType) String() string {
	s, ok := AttackRecordType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WantedType) String() string {
	s, ok := WantedType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OnlineStatus) String() string {
	s, ok := OnlineStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserMsgType) String() string {
	s, ok := UserMsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserMsgMod) String() string {
	s, ok := UserMsgMod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserMsgTypePhp) String() string {
	s, ok := UserMsgTypePhp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GuardCardSendType) String() string {
	s, ok := GuardCardSendType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserMsgStatus) String() string {
	s, ok := UserMsgStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MsgType) String() string {
	s, ok := MsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MsgStatus) String() string {
	s, ok := MsgStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x FriendType) String() string {
	s, ok := FriendType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InviteType) String() string {
	s, ok := InviteType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PetMsgType) String() string {
	s, ok := PetMsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PropertyType) String() string {
	s, ok := PropertyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PropsGroup) String() string {
	s, ok := PropsGroup_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StrangeFriendApplyType) String() string {
	s, ok := StrangeFriendApplyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StrangeFriendApplyStatus) String() string {
	s, ok := StrangeFriendApplyStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StrangeFriendAddType) String() string {
	s, ok := StrangeFriendAddType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DataTransferType) String() string {
	s, ok := DataTransferType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Language) String() string {
	s, ok := Language_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ConstRewardType) String() string {
	s, ok := ConstRewardType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WheelResultType) String() string {
	s, ok := WheelResultType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IPCMessageID) String() string {
	s, ok := IPCMessageID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
