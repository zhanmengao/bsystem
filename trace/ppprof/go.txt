GODEBUG=gctrace=1 go run main.go 2>xx.log ，标准输出流是GODEBUG=gctrace=1 go run main.go,打印至控制台。会在同路径下生成 xx.log,内含gc信息

gc 1 @0.038s 1%: 0.55+0.12+0.081 ms clock, 2.2+0/0.42/1.1+0.32 ms cpu, 4->4->0 MB, 5 MB goal, 4 P。
1 表示第一次执行
@0.038s 表示程序执行的总时间
1% 垃圾回收时间占用总的运行时间百分比
0.018+1.3+0.076 ms clock 垃圾回收的时间，分别为STW（stop-the-world）清扫的时间, 并发标记和扫描的时间，STW标记的时间
0.054+0.35/1.0/3.0+0.23 ms cpu 垃圾回收占用cpu时间
4->4->3 MB 堆的大小，gc后堆的大小，存活堆的大小
5 MB goal 整体堆的大小
4 P 使用的处理器数量


go run main.go --cpuprofile=cpu.prof会在当前路径下生成cpu.prof 文件,然后执行
go tool pprof main.go cpu.prof

堆内存
go run main.go --memprofile=mem.prof
go tool pprof main.go mem.prof

逃逸分析
执行
go build -gcflags '-m -l' main.go 或者 go build -gcflags ‘-m -m’ main.go
前者消除内联了，
go build -gcflags '-m -l' main.go -l 一个，表示消除内敛
go build -gcflags '-m -l -l' main.go -l 两个 ，表示内联级别比默认强
go build -gcflags '-m -l' main.go -l 3个，强内敛，二进制包体积变大，但是不稳定，可能有bug