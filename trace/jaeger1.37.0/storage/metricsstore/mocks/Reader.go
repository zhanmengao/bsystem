// Code generated by mockery v1.0.0. DO NOT EDIT.

// Copyright (c) 2021 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	metrics "github.com/jaegertracing/jaeger/proto-gen/api_v2/metrics"
	metricsstore "github.com/jaegertracing/jaeger/storage/metricsstore"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// GetCallRates provides a mock function with given fields: ctx, params
func (_m *Reader) GetCallRates(ctx context.Context, params *metricsstore.CallRateQueryParameters) (*metrics.MetricFamily, error) {
	ret := _m.Called(ctx, params)

	var r0 *metrics.MetricFamily
	if rf, ok := ret.Get(0).(func(context.Context, *metricsstore.CallRateQueryParameters) *metrics.MetricFamily); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.MetricFamily)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *metricsstore.CallRateQueryParameters) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrorRates provides a mock function with given fields: ctx, params
func (_m *Reader) GetErrorRates(ctx context.Context, params *metricsstore.ErrorRateQueryParameters) (*metrics.MetricFamily, error) {
	ret := _m.Called(ctx, params)

	var r0 *metrics.MetricFamily
	if rf, ok := ret.Get(0).(func(context.Context, *metricsstore.ErrorRateQueryParameters) *metrics.MetricFamily); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.MetricFamily)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *metricsstore.ErrorRateQueryParameters) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatencies provides a mock function with given fields: ctx, params
func (_m *Reader) GetLatencies(ctx context.Context, params *metricsstore.LatenciesQueryParameters) (*metrics.MetricFamily, error) {
	ret := _m.Called(ctx, params)

	var r0 *metrics.MetricFamily
	if rf, ok := ret.Get(0).(func(context.Context, *metricsstore.LatenciesQueryParameters) *metrics.MetricFamily); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.MetricFamily)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *metricsstore.LatenciesQueryParameters) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinStepDuration provides a mock function with given fields: ctx, params
func (_m *Reader) GetMinStepDuration(ctx context.Context, params *metricsstore.MinStepDurationQueryParameters) (time.Duration, error) {
	ret := _m.Called(ctx, params)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(context.Context, *metricsstore.MinStepDurationQueryParameters) time.Duration); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *metricsstore.MinStepDurationQueryParameters) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
