// Copyright (c) 2021 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	zap "go.uber.org/zap"

	metricsstore "github.com/jaegertracing/jaeger/storage/metricsstore"
)

// MetricsFactory is an autogenerated mock type for the MetricsFactory type
type MetricsFactory struct {
	mock.Mock
}

// CreateMetricsReader provides a mock function with given fields:
func (_m *MetricsFactory) CreateMetricsReader() (metricsstore.Reader, error) {
	ret := _m.Called()

	var r0 metricsstore.Reader
	if rf, ok := ret.Get(0).(func() metricsstore.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metricsstore.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: logger
func (_m *MetricsFactory) Initialize(logger *zap.Logger) error {
	ret := _m.Called(logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(*zap.Logger) error); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
