// Code generated by mockery v2.10.4. DO NOT EDIT.

// Copyright (c) 2022 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	client "github.com/jaegertracing/jaeger/pkg/es/client"
)

// IndexAPI is an autogenerated mock type for the IndexAPI type
type IndexAPI struct {
	mock.Mock
}

// CreateAlias provides a mock function with given fields: aliases
func (_m *IndexAPI) CreateAlias(aliases []client.Alias) error {
	ret := _m.Called(aliases)

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Alias) error); ok {
		r0 = rf(aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndex provides a mock function with given fields: index
func (_m *IndexAPI) CreateIndex(index string) error {
	ret := _m.Called(index)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTemplate provides a mock function with given fields: template, name
func (_m *IndexAPI) CreateTemplate(template string, name string) error {
	ret := _m.Called(template, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(template, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAlias provides a mock function with given fields: aliases
func (_m *IndexAPI) DeleteAlias(aliases []client.Alias) error {
	ret := _m.Called(aliases)

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Alias) error); ok {
		r0 = rf(aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIndices provides a mock function with given fields: indices
func (_m *IndexAPI) DeleteIndices(indices []client.Index) error {
	ret := _m.Called(indices)

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Index) error); ok {
		r0 = rf(indices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJaegerIndices provides a mock function with given fields: prefix
func (_m *IndexAPI) GetJaegerIndices(prefix string) ([]client.Index, error) {
	ret := _m.Called(prefix)

	var r0 []client.Index
	if rf, ok := ret.Get(0).(func(string) []client.Index); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollover provides a mock function with given fields: rolloverTarget, conditions
func (_m *IndexAPI) Rollover(rolloverTarget string, conditions map[string]interface{}) error {
	ret := _m.Called(rolloverTarget, conditions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(rolloverTarget, conditions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
