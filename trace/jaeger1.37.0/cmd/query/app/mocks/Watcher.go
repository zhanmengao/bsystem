// Code generated by mockery v1.0.0. DO NOT EDIT.

// Copyright (c) 2021 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mocks

import (
	fsnotify "github.com/fsnotify/fsnotify"
	mock "github.com/stretchr/testify/mock"
)

// Watcher is an autogenerated mock type for the Watcher type
type Watcher struct {
	mock.Mock
}

// Add provides a mock function with given fields: name
func (_m *Watcher) Add(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Errors provides a mock function with given fields:
func (_m *Watcher) Errors() chan error {
	ret := _m.Called()

	var r0 chan error
	if rf, ok := ret.Get(0).(func() chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// Events provides a mock function with given fields:
func (_m *Watcher) Events() chan fsnotify.Event {
	ret := _m.Called()

	var r0 chan fsnotify.Event
	if rf, ok := ret.Get(0).(func() chan fsnotify.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan fsnotify.Event)
		}
	}

	return r0
}
