#!/usr/bin/bash

# 读取参数
ACTION=$1
STRUCT_NAME=$2
DB_NAME=$3
KEY_FMT=$4
FIELD_FMT=$5
KEY_PARAMS=$6
FIELD_PARAMS=$7
N_PARAM=$#

# 定义常量
ACTION_INIT="init"
ACTION_ADD="add"
OUTPUT_FILE="auto_gen.db.go"

# 展示帮助信息
SHOW_USAGE() {
  echo "  $0 is designed to generate general PlanetDataProto(interface) go struct for db.proto"
  echo "  and this script is typically called by //go:generate in db.proto file"
  echo "Usage:"
  echo "    bash $0 action GOFILE GOPACKAGE"
  echo "      action         =init"
  echo "      GOFILE         the source go file name"
  echo "      GOPACKAGE      the target go package"
  echo ""
  echo "    bash $0 action struct_name db_name key_fmt field_fmt key_param_list field_param_list"
  echo "      action           =add"
  echo "      struct_name      the message name"
  echo "      db_name          target db name, enum name in dbname.go"
  echo "      key_fmt          redis key format"
  echo "      field_fmt        empty or the hash field name"
  echo ""
  echo "      key_param_list   specify the replacement key_param name and type in key_fmt"
  echo "          format: [-|key_param@type[,key_param@type]...]"
  echo ""
  echo "      field_param_list specify the replacement field_param name and type in field_fmt"
  echo "          format: [field_param@type[,field_param@type]...]"
  echo "Example:"
  echo "    bash $0 init \$GOFILE \$GOPACKAGE"
  echo "    bash $0 add UserStatistics userMajorData majorData:%s userStat UID@string"
  echo "    bash $0 add UserStruct userMajorData staticKey field:%d:%s - ts@int64,name@string"
  echo ""
  exit 0
}

# 初始化输出文件
INIT_OUTPUT() {
  GoSourceFile=$STRUCT_NAME
  GoPackageName=$DB_NAME
  cat > $OUTPUT_FILE <<- EOF
// Code generated by '$0', DO NOT EDIT.
// source file: $GoSourceFile

package database

import (
	"fmt"
	pb "$GoPackageName"
)


EOF
}

# 获取生成结构体自身机器构造方法的参数
GET_STRUCT_PARAMS() {
  targetStructName=$STRUCT_NAME"Proto"
  structField=
  funcNewParam=
  funcNewFilling=

  mergedParams=""
  if [ "$KEY_PARAMS" = "-" -o -z "$KEY_PARAMS" ] ; then
    mergedParams=""
  else
    mergedParams=$KEY_PARAMS
  fi

  if [ -n "$FIELD_PARAMS" -a ! "$FIELD_PARAMS" = "-" ] ; then
    if [ -n "$mergedParams" ] ; then
      mergedParams="$mergedParams,"
    fi
    mergedParams="$mergedParams$FIELD_PARAMS"
  fi

  if [ -z $mergedParams ] ; then
    return
  fi
  structField=$(echo "$mergedParams" | tr "," "\n" | awk -F"@" '{print $1" "$2}')
  funcNewParam=$(echo "$mergedParams" | tr "," "\n" | awk -F"@" '{print $1" "$2", "}')
  funcNewFilling=$(echo "$mergedParams" | tr "," "\n" | awk -F"@" '{print $1":"$1","}')
}

# 获取生成存储Key的参数
GET_KEY_PARAMS() {
  keyFmt=$KEY_FMT
  funcKeyReplace=""

  if [ "$KEY_PARAMS" = "-" -o -z "$KEY_PARAMS" ] ; then
    funcKeyReplace=""
  else
    funcKeyReplace=$(echo $KEY_PARAMS | tr "," "\n" | awk -F"@" '{print "p."$1", "}')
  fi
}

# 获取存储field的参数
GET_FIELD_PARAMS() {
  fieldFmt=$FIELD_FMT
  funcFieldReplace=""
  funcFieldBool="false"

  if [ "$FIELD_FMT" = "-" -o -z "$FIELD_FMT" ] ; then
    fieldFmt="\"\""
    funcFieldBool="false"
  elif [ -z "$FIELD_PARAMS" ] ; then
    funcFieldBool="true"
  else
    funcFieldBool="true"
    funcFieldReplace=$(echo $FIELD_PARAMS | tr "," "\n" | awk -F"@" '{print "p."$1", "}')
  fi
}

# 添加一个新的结构体到输出文件
ADD_ITEM() {
  GET_STRUCT_PARAMS
  GET_KEY_PARAMS
  GET_FIELD_PARAMS

  cat >> $OUTPUT_FILE <<- EOF
type $targetStructName struct {
	*pb.$STRUCT_NAME
	$structField
}

func New$targetStructName(base *pb.$STRUCT_NAME,$funcNewParam) *$targetStructName {
  if base == nil {
    base = &pb.$STRUCT_NAME{}
  }
	return &$targetStructName{
		$STRUCT_NAME: base,
		$funcNewFilling
	}
}

func (p *$targetStructName) GetProto() ProtoMessage {
	return p.$STRUCT_NAME
}

func (p *$targetStructName) SetProto(data ProtoMessage)  {
	 p.$STRUCT_NAME = data.(*pb.$STRUCT_NAME)
}


func (p *$targetStructName) GetDBName() string {
	return $DB_NAME
}

func (p *$targetStructName) getKeyFormat() string {
	return $keyFmt
}

func (p *$targetStructName) getFieldFormat() string {
	return $fieldFmt
}

func (p *$targetStructName) GetKey() string {
	return fmt.Sprintf(p.getKeyFormat(),
	$funcKeyReplace
	)
}

func (p *$targetStructName) GetHashField() (string, bool) {
	return fmt.Sprintf(p.getFieldFormat(),
	$funcFieldReplace
	), $funcFieldBool
}

EOF
}

# 主处理函数
MAIN() {
  if [ $N_PARAM -lt 2 ] ; then
    SHOW_USAGE
  elif [ "$ACTION" = "$ACTION_INIT" ] ; then
    INIT_OUTPUT
    return 0
  fi

  if [ $N_PARAM -lt 5 ] ; then
    SHOW_USAGE
  elif [ "$ACTION" = "$ACTION_ADD" ] ; then
    ADD_ITEM
    return 0
  fi
  SHOW_USAGE
}

MAIN
