
// SetRDPPort.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "SetRDPPort.h"
#include "SetRDPPortDlg.h"

#include "LoginDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CSetRDPPortApp

BEGIN_MESSAGE_MAP(CSetRDPPortApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CSetRDPPortApp 构造

CSetRDPPortApp::CSetRDPPortApp()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CSetRDPPortApp 对象

CSetRDPPortApp theApp;


// CSetRDPPortApp 初始化

BOOL CSetRDPPortApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	if (!AfxSocketInit())
	{
		AfxMessageBox(IDP_SOCKETS_INIT_FAILED);
		return FALSE;
	}


	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));


	SetRegistryKey(_T("VESetRDPSessionHost"));	

	/**	
	* 登录校验	
	* ================================================================= */

#ifdef _DEBUG

	   

#else
	/**
		LoginDlg LoginDlg;
		if (LoginDlg.DoModal() == IDCANCEL)
		{
			return FALSE;
		}
		**/
#endif

	/** ================================================================ */

	CSetRDPPortDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 在此放置处理何时用
		//  “确定”来关闭对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用
		//  “取消”来关闭对话框的代码
	}
	else if (nResponse == -1)
	{
		//TRACE(traceAppMsg, 0, "警告: 对话框创建失败，应用程序将意外终止。\n");
		//TRACE(traceAppMsg, 0, "警告: 如果您在对话框上使用 MFC 控件，则无法 #define _AFX_NO_MFC_CONTROLS_IN_DIALOGS。\n");
	}

	// 删除上面创建的 shell 管理器。
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}


	return FALSE;
}

